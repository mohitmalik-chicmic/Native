{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/assets/Script/Zip.ts"],"names":["_decorator","Component","ImageAsset","SpriteFrame","Texture2D","Sprite","native","assetManager","ccclass","property","Zip","downlaodZip","console","log","result","reflection","callStaticMethod","path","loadRemote","ext","err","imageAsset","start","createDemoImage","tempArr","i","push","pixelsArr","Uint8Array","reset","_data","width","height","format","PixelFormat","RGBA8888","_compressed","tex","image","spriteFrame","texture","packable","RandomSprite","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ImageAsset, SpriteFrame, Texture2D, Sprite, find, native, assetManager } from \"cc\";\nconst { ccclass, property } = _decorator;\n// import http from \"http\";\n//import JSZip from \"jszip\";\n\ndeclare global {\n    interface Navigator {\n        msSaveBlob?: (blob: any, defaultName?: string) => boolean;\n    }\n}\n\n/**\n interface OutputByType {\n    base64: string;\n    string: string;\n    text: string;\n    binarystring: string;\n    array: number[];\n    uint8array: Uint8Array;\n    arraybuffer: ArrayBuffer;\n    blob: Blob;\n    nodebuffer: Buffer;\n}\n\n */\n@ccclass(\"Zip\")\nexport class Zip extends Component {\n    @property(Sprite) RandomSprite: Sprite = null;\n    start() {\n        this.createDemoImage();\n        this.downlaodZip();\n      //  var zip = new JSZip();\n       // console.log(zip);\n\n        //Picture\n        // this.loadUsingRequest(\"https://drive.google.com/uc?export=download&id=1f0FHWfXE4exUErKzzsOj_7GTuc1FmtEg\");\n\n        // Mask\n       // this.loadUsingRequest(\"https://drive.google.com/uc?export=download&id=14MVx2mgsInNdfYx8jQ-6QwwgbPASpxQt\");\n\n        // this.loadFromRemote();\n        // this.loadZip();\n    }\n    downlaodZip = () => {\n        console.log(\"clikced\");\n        let result = native.reflection.callStaticMethod(\"com/cocos/game/AppActivity\", \"ZipDownlaod\", \"(Ljava/lang/String;)Ljava/lang/String;\", \"start\");\n        if(result){\n            console.log(\"PRINTING\", result);\n            let path = `${result}/Music/1.jpg`;\n            assetManager.loadRemote<ImageAsset>(path, {ext: '.jpg'},function (err, imageAsset) {\n                if(err){\n                    console.log(\"NOT FOUND\");\n                    console.log(\"Printing path\", path);\n                    return\n                }\n                console.log(\"Printing ImageAssest\", path,imageAsset);\n               // this.RandomSprite.spriteFrame = imageAsset;\n            });\n            \n        }\n    }\n\n    // loadUsingRequest(remoteZipLink: string) {\n    //     const request = new Request(remoteZipLink); \n\n    //     const url = request.url;\n    //     const method = request.method;\n    //     const credentials = request.credentials;\n\n    //     console.log(url, method, credentials);\n\n    //     fetch(request)\n    //         .then((response) => response.blob())\n    //         .then((blob) => {\n    //             console.log(blob);\n\n    //             JSZip.loadAsync(blob).then((zip) => {\n    //                 console.log(\"LOADED SUCCESS\", zip);\n    //                 return zip\n    //                     .file(\"Mask/maskLeft.png\")\n    //                     .async(\"base64\")\n    //                     .then((data: string) => {\n    //                         let img = new Image();\n    //                         img.src = \"data:image/png;base64, \" + data;\n    //                         console.log(data);\n    //                         img.onload = () => {\n    //                             let imageAsset: ImageAsset = new ImageAsset(img);\n    //                             let tex: Texture2D = new Texture2D();\n    //                             tex.image = imageAsset;\n    //                             let spriteFrame = new SpriteFrame();\n    //                             spriteFrame.texture = tex;\n    //                             spriteFrame.packable = false;\n    //                             this.RandomSprite.spriteFrame = spriteFrame;\n    //                         };\n    //                     });\n    //             });\n    //         });\n    // }\n\n    createDemoImage() {\n        let tempArr: number[] = [];\n        for (let i: number = 0; i < 16384; i++) {\n            tempArr.push(255);\n            tempArr.push(255);\n            tempArr.push(255);\n            tempArr.push(255);\n        }\n        for (let i: number = 0; i < 16384; i++) {\n            tempArr.push(255);\n            tempArr.push(0);\n            tempArr.push(0);\n            tempArr.push(255);\n        }\n        for (let i: number = 0; i < 16384; i++) {\n            tempArr.push(0);\n            tempArr.push(255);\n            tempArr.push(0);\n            tempArr.push(255);\n        }\n        for (let i: number = 0; i < 16384; i++) {\n            tempArr.push(0);\n            tempArr.push(0);\n            tempArr.push(255);\n            tempArr.push(255);\n        }\n\n        let pixelsArr: ArrayBufferView = new Uint8Array(tempArr);\n        let imageAsset: ImageAsset = new ImageAsset();\n        imageAsset.reset({\n            _data: pixelsArr,\n            width: 256,\n            height: 256,\n            format: Texture2D.PixelFormat.RGBA8888,\n            _compressed: false,\n        });\n        let tex: Texture2D = new Texture2D();\n        tex.image = imageAsset;\n        let spriteFrame = new SpriteFrame();\n        spriteFrame.texture = tex;\n        spriteFrame.packable = false;\n        this.RandomSprite.spriteFrame = spriteFrame;\n    }\n\n    update(deltaTime: number) {}\n}\n"]}
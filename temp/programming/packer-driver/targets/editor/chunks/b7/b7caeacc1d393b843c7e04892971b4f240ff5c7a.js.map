{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/jszip/lib/zipEntry.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","url","define","exports","require","module","__filename","__dirname","readerFor","utils","CompressedObject","crc32fn","utf8","compressions","support","MADE_BY_DOS","MADE_BY_UNIX","findCompression","compressionMethod","method","Object","prototype","hasOwnProperty","call","magic","ZipEntry","options","loadOptions","isEncrypted","bitFlag","useUTF8","readLocalPart","reader","compression","localExtraFieldsLength","skip","fileNameLength","readInt","fileName","readData","compressedSize","uncompressedSize","Error","pretty","transformTo","decompressed","crc32","readCentralPart","versionMadeBy","readString","date","readDate","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","localHeaderOffset","readExtraFields","parseZIP64ExtraField","fileComment","processAttributes","unixPermissions","dosPermissions","madeBy","dir","fileNameStr","slice","extraFields","extraReader","value","MAX_VALUE_32BITS","end","index","extraFieldId","extraFieldLength","extraFieldValue","id","length","setIndex","handleUTF8","decodeParamType","uint8array","utf8decode","fileCommentStr","upath","findExtraFieldUnicodePath","fileNameByteArray","decodeFileName","ucomment","findExtraFieldUnicodeComment","commentByteArray","upathField","ucommentField","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './reader/readerFor';\nimport { __cjsMetaURL as _req0} from './utils';\nimport { __cjsMetaURL as _req1} from './compressedObject';\nimport { __cjsMetaURL as _req2} from './crc32';\nimport { __cjsMetaURL as _req3} from './utf8';\nimport { __cjsMetaURL as _req4} from './compressions';\nimport { __cjsMetaURL as _req5} from './support';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n var readerFor = require(\"./reader/readerFor\");\n var utils = require(\"./utils\");\n var CompressedObject = require(\"./compressedObject\");\n var crc32fn = require(\"./crc32\");\n var utf8 = require(\"./utf8\");\n var compressions = require(\"./compressions\");\n var support = require(\"./support\");\n\n var MADE_BY_DOS = 0x00;\n var MADE_BY_UNIX = 0x03;\n\n /**\n  * Find a compression registered in JSZip.\n  * @param {string} compressionMethod the method magic to find.\n  * @return {Object|null} the JSZip compression object, null if none found.\n  */\n var findCompression = function(compressionMethod) {\n     for (var method in compressions) {\n         if (!Object.prototype.hasOwnProperty.call(compressions, method)) {\n             continue;\n         }\n         if (compressions[method].magic === compressionMethod) {\n             return compressions[method];\n         }\n     }\n     return null;\n };\n\n // class ZipEntry {{{\n /**\n  * An entry in the zip file.\n  * @constructor\n  * @param {Object} options Options of the current file.\n  * @param {Object} loadOptions Options for loading the stream.\n  */\n function ZipEntry(options, loadOptions) {\n     this.options = options;\n     this.loadOptions = loadOptions;\n }\n ZipEntry.prototype = {\n     /**\n      * say if the file is encrypted.\n      * @return {boolean} true if the file is encrypted, false otherwise.\n      */\n     isEncrypted: function() {\n         // bit 1 is set\n         return (this.bitFlag & 0x0001) === 0x0001;\n     },\n     /**\n      * say if the file has utf-8 filename/comment.\n      * @return {boolean} true if the filename/comment is in utf-8, false otherwise.\n      */\n     useUTF8: function() {\n         // bit 11 is set\n         return (this.bitFlag & 0x0800) === 0x0800;\n     },\n     /**\n      * Read the local part of a zip file and add the info in this object.\n      * @param {DataReader} reader the reader to use.\n      */\n     readLocalPart: function(reader) {\n         var compression, localExtraFieldsLength;\n\n         // we already know everything from the central dir !\n         // If the central dir data are false, we are doomed.\n         // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.\n         // The less data we get here, the more reliable this should be.\n         // Let's skip the whole header and dash to the data !\n         reader.skip(22);\n         // in some zip created on windows, the filename stored in the central dir contains \\ instead of /.\n         // Strangely, the filename here is OK.\n         // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes\n         // or APPNOTE#4.4.17.1, \"All slashes MUST be forward slashes '/'\") but there are a lot of bad zip generators...\n         // Search \"unzip mismatching \"local\" filename continuing with \"central\" filename version\" on\n         // the internet.\n         //\n         // I think I see the logic here : the central directory is used to display\n         // content and the local directory is used to extract the files. Mixing / and \\\n         // may be used to display \\ to windows users and use / when extracting the files.\n         // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394\n         this.fileNameLength = reader.readInt(2);\n         localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir\n         // the fileName is stored as binary data, the handleUTF8 method will take care of the encoding.\n         this.fileName = reader.readData(this.fileNameLength);\n         reader.skip(localExtraFieldsLength);\n\n         if (this.compressedSize === -1 || this.uncompressedSize === -1) {\n             throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory \" + \"(compressedSize === -1 || uncompressedSize === -1)\");\n         }\n\n         compression = findCompression(this.compressionMethod);\n         if (compression === null) { // no compression found\n             throw new Error(\"Corrupted zip : compression \" + utils.pretty(this.compressionMethod) + \" unknown (inner file : \" + utils.transformTo(\"string\", this.fileName) + \")\");\n         }\n         this.decompressed = new CompressedObject(this.compressedSize, this.uncompressedSize, this.crc32, compression, reader.readData(this.compressedSize));\n     },\n\n     /**\n      * Read the central part of a zip file and add the info in this object.\n      * @param {DataReader} reader the reader to use.\n      */\n     readCentralPart: function(reader) {\n         this.versionMadeBy = reader.readInt(2);\n         reader.skip(2);\n         // this.versionNeeded = reader.readInt(2);\n         this.bitFlag = reader.readInt(2);\n         this.compressionMethod = reader.readString(2);\n         this.date = reader.readDate();\n         this.crc32 = reader.readInt(4);\n         this.compressedSize = reader.readInt(4);\n         this.uncompressedSize = reader.readInt(4);\n         var fileNameLength = reader.readInt(2);\n         this.extraFieldsLength = reader.readInt(2);\n         this.fileCommentLength = reader.readInt(2);\n         this.diskNumberStart = reader.readInt(2);\n         this.internalFileAttributes = reader.readInt(2);\n         this.externalFileAttributes = reader.readInt(4);\n         this.localHeaderOffset = reader.readInt(4);\n\n         if (this.isEncrypted()) {\n             throw new Error(\"Encrypted zip are not supported\");\n         }\n\n         // will be read in the local part, see the comments there\n         reader.skip(fileNameLength);\n         this.readExtraFields(reader);\n         this.parseZIP64ExtraField(reader);\n         this.fileComment = reader.readData(this.fileCommentLength);\n     },\n\n     /**\n      * Parse the external file attributes and get the unix/dos permissions.\n      */\n     processAttributes: function () {\n         this.unixPermissions = null;\n         this.dosPermissions = null;\n         var madeBy = this.versionMadeBy >> 8;\n\n         // Check if we have the DOS directory flag set.\n         // We look for it in the DOS and UNIX permissions\n         // but some unknown platform could set it as a compatibility flag.\n         this.dir = this.externalFileAttributes & 0x0010 ? true : false;\n\n         if(madeBy === MADE_BY_DOS) {\n             // first 6 bits (0 to 5)\n             this.dosPermissions = this.externalFileAttributes & 0x3F;\n         }\n\n         if(madeBy === MADE_BY_UNIX) {\n             this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;\n             // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);\n         }\n\n         // fail safe : if the name ends with a / it probably means a folder\n         if (!this.dir && this.fileNameStr.slice(-1) === \"/\") {\n             this.dir = true;\n         }\n     },\n\n     /**\n      * Parse the ZIP64 extra field and merge the info in the current ZipEntry.\n      * @param {DataReader} reader the reader to use.\n      */\n     parseZIP64ExtraField: function() {\n         if (!this.extraFields[0x0001]) {\n             return;\n         }\n\n         // should be something, preparing the extra reader\n         var extraReader = readerFor(this.extraFields[0x0001].value);\n\n         // I really hope that these 64bits integer can fit in 32 bits integer, because js\n         // won't let us have more.\n         if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n             this.uncompressedSize = extraReader.readInt(8);\n         }\n         if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n             this.compressedSize = extraReader.readInt(8);\n         }\n         if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n             this.localHeaderOffset = extraReader.readInt(8);\n         }\n         if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n             this.diskNumberStart = extraReader.readInt(4);\n         }\n     },\n     /**\n      * Read the central part of a zip file and add the info in this object.\n      * @param {DataReader} reader the reader to use.\n      */\n     readExtraFields: function(reader) {\n         var end = reader.index + this.extraFieldsLength,\n             extraFieldId,\n             extraFieldLength,\n             extraFieldValue;\n\n         if (!this.extraFields) {\n             this.extraFields = {};\n         }\n\n         while (reader.index + 4 < end) {\n             extraFieldId = reader.readInt(2);\n             extraFieldLength = reader.readInt(2);\n             extraFieldValue = reader.readData(extraFieldLength);\n\n             this.extraFields[extraFieldId] = {\n                 id: extraFieldId,\n                 length: extraFieldLength,\n                 value: extraFieldValue\n             };\n         }\n\n         reader.setIndex(end);\n     },\n     /**\n      * Apply an UTF8 transformation if needed.\n      */\n     handleUTF8: function() {\n         var decodeParamType = support.uint8array ? \"uint8array\" : \"array\";\n         if (this.useUTF8()) {\n             this.fileNameStr = utf8.utf8decode(this.fileName);\n             this.fileCommentStr = utf8.utf8decode(this.fileComment);\n         } else {\n             var upath = this.findExtraFieldUnicodePath();\n             if (upath !== null) {\n                 this.fileNameStr = upath;\n             } else {\n                 // ASCII text or unsupported code page\n                 var fileNameByteArray =  utils.transformTo(decodeParamType, this.fileName);\n                 this.fileNameStr = this.loadOptions.decodeFileName(fileNameByteArray);\n             }\n\n             var ucomment = this.findExtraFieldUnicodeComment();\n             if (ucomment !== null) {\n                 this.fileCommentStr = ucomment;\n             } else {\n                 // ASCII text or unsupported code page\n                 var commentByteArray =  utils.transformTo(decodeParamType, this.fileComment);\n                 this.fileCommentStr = this.loadOptions.decodeFileName(commentByteArray);\n             }\n         }\n     },\n\n     /**\n      * Find the unicode path declared in the extra field, if any.\n      * @return {String} the unicode path, null otherwise.\n      */\n     findExtraFieldUnicodePath: function() {\n         var upathField = this.extraFields[0x7075];\n         if (upathField) {\n             var extraReader = readerFor(upathField.value);\n\n             // wrong version\n             if (extraReader.readInt(1) !== 1) {\n                 return null;\n             }\n\n             // the crc of the filename changed, this field is out of date.\n             if (crc32fn(this.fileName) !== extraReader.readInt(4)) {\n                 return null;\n             }\n\n             return utf8.utf8decode(extraReader.readData(upathField.length - 5));\n         }\n         return null;\n     },\n\n     /**\n      * Find the unicode comment declared in the extra field, if any.\n      * @return {String} the unicode comment, null otherwise.\n      */\n     findExtraFieldUnicodeComment: function() {\n         var ucommentField = this.extraFields[0x6375];\n         if (ucommentField) {\n             var extraReader = readerFor(ucommentField.value);\n\n             // wrong version\n             if (extraReader.readInt(1) !== 1) {\n                 return null;\n             }\n\n             // the crc of the comment changed, this field is out of date.\n             if (crc32fn(this.fileComment) !== extraReader.readInt(4)) {\n                 return null;\n             }\n\n             return utf8.utf8decode(extraReader.readData(ucommentField.length - 5));\n         }\n         return null;\n     }\n };\n module.exports = ZipEntry;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './reader/readerFor': _req,\n  './utils': _req0,\n  './compressedObject': _req1,\n  './crc32': _req2,\n  './utf8': _req3,\n  './compressions': _req4,\n  './support': _req5,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
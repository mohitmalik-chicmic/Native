{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/jszip/lib/stream/StreamHelper.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","url","define","exports","require","module","__filename","__dirname","utils","ConvertWorker","GenericWorker","base64","support","external","NodejsStreamOutputAdapter","nodestream","e","transformZipOutput","type","content","mimeType","newBlob","transformTo","encode","concat","dataArray","i","index","res","totalLength","length","join","Array","prototype","apply","Uint8Array","set","Buffer","Error","accumulate","helper","updateCallback","Promise","resolve","reject","chunkType","_internalType","resultType","_outputType","_mimeType","on","data","meta","push","err","result","resume","StreamHelper","worker","outputType","internalType","checkSupport","_worker","pipe","lock","error","updateCb","evt","fn","self","chunk","call","delay","arguments","pause","toNodejsStream","objectMode","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../utils';\nimport { __cjsMetaURL as _req0} from './ConvertWorker';\nimport { __cjsMetaURL as _req1} from './GenericWorker';\nimport { __cjsMetaURL as _req2} from '../base64';\nimport { __cjsMetaURL as _req3} from '../support';\nimport { __cjsMetaURL as _req4} from '../external';\nimport { __cjsMetaURL as _req5} from '../nodejs/NodejsStreamOutputAdapter';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n\n var utils = require(\"../utils\");\n var ConvertWorker = require(\"./ConvertWorker\");\n var GenericWorker = require(\"./GenericWorker\");\n var base64 = require(\"../base64\");\n var support = require(\"../support\");\n var external = require(\"../external\");\n\n var NodejsStreamOutputAdapter = null;\n if (support.nodestream) {\n     try {\n         NodejsStreamOutputAdapter = require(\"../nodejs/NodejsStreamOutputAdapter\");\n     } catch(e) {\n         // ignore\n     }\n }\n\n /**\n  * Apply the final transformation of the data. If the user wants a Blob for\n  * example, it's easier to work with an U8intArray and finally do the\n  * ArrayBuffer/Blob conversion.\n  * @param {String} type the name of the final type\n  * @param {String|Uint8Array|Buffer} content the content to transform\n  * @param {String} mimeType the mime type of the content, if applicable.\n  * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the content in the right format.\n  */\n function transformZipOutput(type, content, mimeType) {\n     switch(type) {\n     case \"blob\" :\n         return utils.newBlob(utils.transformTo(\"arraybuffer\", content), mimeType);\n     case \"base64\" :\n         return base64.encode(content);\n     default :\n         return utils.transformTo(type, content);\n     }\n }\n\n /**\n  * Concatenate an array of data of the given type.\n  * @param {String} type the type of the data in the given array.\n  * @param {Array} dataArray the array containing the data chunks to concatenate\n  * @return {String|Uint8Array|Buffer} the concatenated data\n  * @throws Error if the asked type is unsupported\n  */\n function concat (type, dataArray) {\n     var i, index = 0, res = null, totalLength = 0;\n     for(i = 0; i < dataArray.length; i++) {\n         totalLength += dataArray[i].length;\n     }\n     switch(type) {\n     case \"string\":\n         return dataArray.join(\"\");\n     case \"array\":\n         return Array.prototype.concat.apply([], dataArray);\n     case \"uint8array\":\n         res = new Uint8Array(totalLength);\n         for(i = 0; i < dataArray.length; i++) {\n             res.set(dataArray[i], index);\n             index += dataArray[i].length;\n         }\n         return res;\n     case \"nodebuffer\":\n         return Buffer.concat(dataArray);\n     default:\n         throw new Error(\"concat : unsupported type '\"  + type + \"'\");\n     }\n }\n\n /**\n  * Listen a StreamHelper, accumulate its content and concatenate it into a\n  * complete block.\n  * @param {StreamHelper} helper the helper to use.\n  * @param {Function} updateCallback a callback called on each update. Called\n  * with one arg :\n  * - the metadata linked to the update received.\n  * @return Promise the promise for the accumulation.\n  */\n function accumulate(helper, updateCallback) {\n     return new external.Promise(function (resolve, reject){\n         var dataArray = [];\n         var chunkType = helper._internalType,\n             resultType = helper._outputType,\n             mimeType = helper._mimeType;\n         helper\n             .on(\"data\", function (data, meta) {\n                 dataArray.push(data);\n                 if(updateCallback) {\n                     updateCallback(meta);\n                 }\n             })\n             .on(\"error\", function(err) {\n                 dataArray = [];\n                 reject(err);\n             })\n             .on(\"end\", function (){\n                 try {\n                     var result = transformZipOutput(resultType, concat(chunkType, dataArray), mimeType);\n                     resolve(result);\n                 } catch (e) {\n                     reject(e);\n                 }\n                 dataArray = [];\n             })\n             .resume();\n     });\n }\n\n /**\n  * An helper to easily use workers outside of JSZip.\n  * @constructor\n  * @param {Worker} worker the worker to wrap\n  * @param {String} outputType the type of data expected by the use\n  * @param {String} mimeType the mime type of the content, if applicable.\n  */\n function StreamHelper(worker, outputType, mimeType) {\n     var internalType = outputType;\n     switch(outputType) {\n     case \"blob\":\n     case \"arraybuffer\":\n         internalType = \"uint8array\";\n         break;\n     case \"base64\":\n         internalType = \"string\";\n         break;\n     }\n\n     try {\n         // the type used internally\n         this._internalType = internalType;\n         // the type used to output results\n         this._outputType = outputType;\n         // the mime type\n         this._mimeType = mimeType;\n         utils.checkSupport(internalType);\n         this._worker = worker.pipe(new ConvertWorker(internalType));\n         // the last workers can be rewired without issues but we need to\n         // prevent any updates on previous workers.\n         worker.lock();\n     } catch(e) {\n         this._worker = new GenericWorker(\"error\");\n         this._worker.error(e);\n     }\n }\n\n StreamHelper.prototype = {\n     /**\n      * Listen a StreamHelper, accumulate its content and concatenate it into a\n      * complete block.\n      * @param {Function} updateCb the update callback.\n      * @return Promise the promise for the accumulation.\n      */\n     accumulate : function (updateCb) {\n         return accumulate(this, updateCb);\n     },\n     /**\n      * Add a listener on an event triggered on a stream.\n      * @param {String} evt the name of the event\n      * @param {Function} fn the listener\n      * @return {StreamHelper} the current helper.\n      */\n     on : function (evt, fn) {\n         var self = this;\n\n         if(evt === \"data\") {\n             this._worker.on(evt, function (chunk) {\n                 fn.call(self, chunk.data, chunk.meta);\n             });\n         } else {\n             this._worker.on(evt, function () {\n                 utils.delay(fn, arguments, self);\n             });\n         }\n         return this;\n     },\n     /**\n      * Resume the flow of chunks.\n      * @return {StreamHelper} the current helper.\n      */\n     resume : function () {\n         utils.delay(this._worker.resume, [], this._worker);\n         return this;\n     },\n     /**\n      * Pause the flow of chunks.\n      * @return {StreamHelper} the current helper.\n      */\n     pause : function () {\n         this._worker.pause();\n         return this;\n     },\n     /**\n      * Return a nodejs stream for this helper.\n      * @param {Function} updateCb the update callback.\n      * @return {NodejsStreamOutputAdapter} the nodejs stream.\n      */\n     toNodejsStream : function (updateCb) {\n         utils.checkSupport(\"nodestream\");\n         if (this._outputType !== \"nodebuffer\") {\n             // an object stream containing blob/arraybuffer/uint8array/string\n             // is strange and I don't know if it would be useful.\n             // I you find this comment and have a good usecase, please open a\n             // bug report !\n             throw new Error(this._outputType + \" is not supported by this method\");\n         }\n\n         return new NodejsStreamOutputAdapter(this, {\n             objectMode : this._outputType !== \"nodebuffer\"\n         }, updateCb);\n     }\n };\n\n\n module.exports = StreamHelper;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../utils': _req,\n  './ConvertWorker': _req0,\n  './GenericWorker': _req1,\n  '../base64': _req2,\n  '../support': _req3,\n  '../external': _req4,\n  '../nodejs/NodejsStreamOutputAdapter': _req5,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
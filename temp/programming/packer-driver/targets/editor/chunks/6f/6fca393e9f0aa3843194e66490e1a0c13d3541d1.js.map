{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/jszip/lib/crc32.js"],"names":["_cjsLoader","_req","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","utils","makeTable","c","table","n","k","crcTable","crc32","crc","buf","len","pos","t","end","i","crc32str","str","charCodeAt","crc32wrapper","input","length","isArray","getTypeOf","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './utils';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n\n var utils = require(\"./utils\");\n\n /**\n  * The following functions come from pako, from pako/lib/zlib/crc32.js\n  * released under the MIT license, see pako https://github.com/nodeca/pako/\n  */\n\n // Use ordinary array, since untyped makes no boost here\n function makeTable() {\n     var c, table = [];\n\n     for(var n =0; n < 256; n++){\n         c = n;\n         for(var k =0; k < 8; k++){\n             c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n         }\n         table[n] = c;\n     }\n\n     return table;\n }\n\n // Create table on load. Just 255 signed longs. Not a problem.\n var crcTable = makeTable();\n\n\n function crc32(crc, buf, len, pos) {\n     var t = crcTable, end = pos + len;\n\n     crc = crc ^ (-1);\n\n     for (var i = pos; i < end; i++ ) {\n         crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n     }\n\n     return (crc ^ (-1)); // >>> 0;\n }\n\n // That's all for the pako functions.\n\n /**\n  * Compute the crc32 of a string.\n  * This is almost the same as the function crc32, but for strings. Using the\n  * same function for the two use cases leads to horrible performances.\n  * @param {Number} crc the starting value of the crc.\n  * @param {String} str the string to use.\n  * @param {Number} len the length of the string.\n  * @param {Number} pos the starting position for the crc32 computation.\n  * @return {Number} the computed crc32.\n  */\n function crc32str(crc, str, len, pos) {\n     var t = crcTable, end = pos + len;\n\n     crc = crc ^ (-1);\n\n     for (var i = pos; i < end; i++ ) {\n         crc = (crc >>> 8) ^ t[(crc ^ str.charCodeAt(i)) & 0xFF];\n     }\n\n     return (crc ^ (-1)); // >>> 0;\n }\n\n module.exports = function crc32wrapper(input, crc) {\n     if (typeof input === \"undefined\" || !input.length) {\n         return 0;\n     }\n\n     var isArray = utils.getTypeOf(input) !== \"string\";\n\n     if(isArray) {\n         return crc32(crc|0, input, input.length, 0);\n     } else {\n         return crc32str(crc|0, input, input.length, 0);\n     }\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './utils': _req,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/jszip/lib/compressedObject.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","url","define","exports","require","module","__filename","__dirname","external","DataWorker","Crc32Probe","DataLengthProbe","CompressedObject","compressedSize","uncompressedSize","crc32","compression","data","compressedContent","prototype","getContentWorker","worker","Promise","resolve","pipe","uncompressWorker","that","on","streamInfo","Error","getCompressedWorker","withStreamInfo","createWorkerFrom","uncompressedWorker","compressionOptions","compressWorker","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './external';\nimport { __cjsMetaURL as _req0} from './stream/DataWorker';\nimport { __cjsMetaURL as _req1} from './stream/Crc32Probe';\nimport { __cjsMetaURL as _req2} from './stream/DataLengthProbe';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n\n var external = require(\"./external\");\n var DataWorker = require(\"./stream/DataWorker\");\n var Crc32Probe = require(\"./stream/Crc32Probe\");\n var DataLengthProbe = require(\"./stream/DataLengthProbe\");\n\n /**\n  * Represent a compressed object, with everything needed to decompress it.\n  * @constructor\n  * @param {number} compressedSize the size of the data compressed.\n  * @param {number} uncompressedSize the size of the data after decompression.\n  * @param {number} crc32 the crc32 of the decompressed file.\n  * @param {object} compression the type of compression, see lib/compressions.js.\n  * @param {String|ArrayBuffer|Uint8Array|Buffer} data the compressed data.\n  */\n function CompressedObject(compressedSize, uncompressedSize, crc32, compression, data) {\n     this.compressedSize = compressedSize;\n     this.uncompressedSize = uncompressedSize;\n     this.crc32 = crc32;\n     this.compression = compression;\n     this.compressedContent = data;\n }\n\n CompressedObject.prototype = {\n     /**\n      * Create a worker to get the uncompressed content.\n      * @return {GenericWorker} the worker.\n      */\n     getContentWorker: function () {\n         var worker = new DataWorker(external.Promise.resolve(this.compressedContent))\n             .pipe(this.compression.uncompressWorker())\n             .pipe(new DataLengthProbe(\"data_length\"));\n\n         var that = this;\n         worker.on(\"end\", function () {\n             if (this.streamInfo[\"data_length\"] !== that.uncompressedSize) {\n                 throw new Error(\"Bug : uncompressed data size mismatch\");\n             }\n         });\n         return worker;\n     },\n     /**\n      * Create a worker to get the compressed content.\n      * @return {GenericWorker} the worker.\n      */\n     getCompressedWorker: function () {\n         return new DataWorker(external.Promise.resolve(this.compressedContent))\n             .withStreamInfo(\"compressedSize\", this.compressedSize)\n             .withStreamInfo(\"uncompressedSize\", this.uncompressedSize)\n             .withStreamInfo(\"crc32\", this.crc32)\n             .withStreamInfo(\"compression\", this.compression)\n         ;\n     }\n };\n\n /**\n  * Chain the given worker with other workers to compress the content with the\n  * given compression.\n  * @param {GenericWorker} uncompressedWorker the worker to pipe.\n  * @param {Object} compression the compression object.\n  * @param {Object} compressionOptions the options to use when compressing.\n  * @return {GenericWorker} the new worker compressing the content.\n  */\n CompressedObject.createWorkerFrom = function (uncompressedWorker, compression, compressionOptions) {\n     return uncompressedWorker\n         .pipe(new Crc32Probe())\n         .pipe(new DataLengthProbe(\"uncompressedSize\"))\n         .pipe(compression.compressWorker(compressionOptions))\n         .pipe(new DataLengthProbe(\"compressedSize\"))\n         .withStreamInfo(\"compression\", compression);\n };\n\n module.exports = CompressedObject;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './external': _req,\n  './stream/DataWorker': _req0,\n  './stream/Crc32Probe': _req1,\n  './stream/DataLengthProbe': _req2,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/jszip/lib/generate/ZipFileWorker.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","url","define","exports","require","module","__filename","__dirname","utils","GenericWorker","utf8","crc32","signature","decToHex","dec","bytes","hex","i","String","fromCharCode","generateUnixExternalFileAttr","unixPermissions","isDir","result","generateDosExternalFileAttr","dosPermissions","generateZipParts","streamInfo","streamedContent","streamingEnded","offset","platform","encodeFileName","file","compression","useCustomEncoding","utf8encode","encodedFileName","transformTo","name","utfEncodedFileName","comment","encodedComment","utfEncodedComment","useUTF8ForFileName","length","useUTF8ForComment","dosTime","dosDate","extraFields","unicodePathExtraField","unicodeCommentExtraField","dir","date","dataInfo","compressedSize","uncompressedSize","bitflag","extFileAttr","versionMadeBy","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCFullYear","getUTCMonth","getUTCDate","header","magic","fileRecord","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","generateCentralDirectoryEnd","entriesCount","centralDirLength","localDirLength","dirEnd","CENTRAL_DIRECTORY_END","generateDataDescriptors","descriptor","DATA_DESCRIPTOR","ZipFileWorker","streamFiles","call","bytesWritten","zipComment","zipPlatform","accumulate","contentBuffer","dirRecords","currentSourceOffset","currentFile","_sources","inherits","prototype","push","chunk","currentFilePercent","meta","percent","remainingFiles","data","openedSource","record","closedSource","shift","flush","prepareNextSource","previous","isPaused","pause","resume","registerPrevious","self","on","processChunk","end","e","error","generatedError","sources","lock","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../utils';\nimport { __cjsMetaURL as _req0} from '../stream/GenericWorker';\nimport { __cjsMetaURL as _req1} from '../utf8';\nimport { __cjsMetaURL as _req2} from '../crc32';\nimport { __cjsMetaURL as _req3} from '../signature';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n\n var utils = require(\"../utils\");\n var GenericWorker = require(\"../stream/GenericWorker\");\n var utf8 = require(\"../utf8\");\n var crc32 = require(\"../crc32\");\n var signature = require(\"../signature\");\n\n /**\n  * Transform an integer into a string in hexadecimal.\n  * @private\n  * @param {number} dec the number to convert.\n  * @param {number} bytes the number of bytes to generate.\n  * @returns {string} the result.\n  */\n var decToHex = function(dec, bytes) {\n     var hex = \"\", i;\n     for (i = 0; i < bytes; i++) {\n         hex += String.fromCharCode(dec & 0xff);\n         dec = dec >>> 8;\n     }\n     return hex;\n };\n\n /**\n  * Generate the UNIX part of the external file attributes.\n  * @param {Object} unixPermissions the unix permissions or null.\n  * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n  * @return {Number} a 32 bit integer.\n  *\n  * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :\n  *\n  * TTTTsstrwxrwxrwx0000000000ADVSHR\n  * ^^^^____________________________ file type, see zipinfo.c (UNX_*)\n  *     ^^^_________________________ setuid, setgid, sticky\n  *        ^^^^^^^^^________________ permissions\n  *                 ^^^^^^^^^^______ not used ?\n  *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only\n  */\n var generateUnixExternalFileAttr = function (unixPermissions, isDir) {\n\n     var result = unixPermissions;\n     if (!unixPermissions) {\n         // I can't use octal values in strict mode, hence the hexa.\n         //  040775 => 0x41fd\n         // 0100664 => 0x81b4\n         result = isDir ? 0x41fd : 0x81b4;\n     }\n     return (result & 0xFFFF) << 16;\n };\n\n /**\n  * Generate the DOS part of the external file attributes.\n  * @param {Object} dosPermissions the dos permissions or null.\n  * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n  * @return {Number} a 32 bit integer.\n  *\n  * Bit 0     Read-Only\n  * Bit 1     Hidden\n  * Bit 2     System\n  * Bit 3     Volume Label\n  * Bit 4     Directory\n  * Bit 5     Archive\n  */\n var generateDosExternalFileAttr = function (dosPermissions) {\n     // the dir flag is already set for compatibility\n     return (dosPermissions || 0)  & 0x3F;\n };\n\n /**\n  * Generate the various parts used in the construction of the final zip file.\n  * @param {Object} streamInfo the hash with information about the compressed file.\n  * @param {Boolean} streamedContent is the content streamed ?\n  * @param {Boolean} streamingEnded is the stream finished ?\n  * @param {number} offset the current offset from the start of the zip file.\n  * @param {String} platform let's pretend we are this platform (change platform dependents fields)\n  * @param {Function} encodeFileName the function to encode the file name / comment.\n  * @return {Object} the zip parts.\n  */\n var generateZipParts = function(streamInfo, streamedContent, streamingEnded, offset, platform, encodeFileName) {\n     var file = streamInfo[\"file\"],\n         compression = streamInfo[\"compression\"],\n         useCustomEncoding = encodeFileName !== utf8.utf8encode,\n         encodedFileName = utils.transformTo(\"string\", encodeFileName(file.name)),\n         utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n         comment = file.comment,\n         encodedComment = utils.transformTo(\"string\", encodeFileName(comment)),\n         utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n         useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n         useUTF8ForComment = utfEncodedComment.length !== comment.length,\n         dosTime,\n         dosDate,\n         extraFields = \"\",\n         unicodePathExtraField = \"\",\n         unicodeCommentExtraField = \"\",\n         dir = file.dir,\n         date = file.date;\n\n\n     var dataInfo = {\n         crc32 : 0,\n         compressedSize : 0,\n         uncompressedSize : 0\n     };\n\n     // if the content is streamed, the sizes/crc32 are only available AFTER\n     // the end of the stream.\n     if (!streamedContent || streamingEnded) {\n         dataInfo.crc32 = streamInfo[\"crc32\"];\n         dataInfo.compressedSize = streamInfo[\"compressedSize\"];\n         dataInfo.uncompressedSize = streamInfo[\"uncompressedSize\"];\n     }\n\n     var bitflag = 0;\n     if (streamedContent) {\n         // Bit 3: the sizes/crc32 are set to zero in the local header.\n         // The correct values are put in the data descriptor immediately\n         // following the compressed data.\n         bitflag |= 0x0008;\n     }\n     if (!useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment)) {\n         // Bit 11: Language encoding flag (EFS).\n         bitflag |= 0x0800;\n     }\n\n\n     var extFileAttr = 0;\n     var versionMadeBy = 0;\n     if (dir) {\n         // dos or unix, we set the dos dir flag\n         extFileAttr |= 0x00010;\n     }\n     if(platform === \"UNIX\") {\n         versionMadeBy = 0x031E; // UNIX, version 3.0\n         extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);\n     } else { // DOS or other, fallback to DOS\n         versionMadeBy = 0x0014; // DOS, version 2.0\n         extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);\n     }\n\n     // date\n     // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html\n     // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html\n     // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html\n\n     dosTime = date.getUTCHours();\n     dosTime = dosTime << 6;\n     dosTime = dosTime | date.getUTCMinutes();\n     dosTime = dosTime << 5;\n     dosTime = dosTime | date.getUTCSeconds() / 2;\n\n     dosDate = date.getUTCFullYear() - 1980;\n     dosDate = dosDate << 4;\n     dosDate = dosDate | (date.getUTCMonth() + 1);\n     dosDate = dosDate << 5;\n     dosDate = dosDate | date.getUTCDate();\n\n     if (useUTF8ForFileName) {\n         // set the unicode path extra field. unzip needs at least one extra\n         // field to correctly handle unicode path, so using the path is as good\n         // as any other information. This could improve the situation with\n         // other archive managers too.\n         // This field is usually used without the utf8 flag, with a non\n         // unicode path in the header (winrar, winzip). This helps (a bit)\n         // with the messy Windows' default compressed folders feature but\n         // breaks on p7zip which doesn't seek the unicode path extra field.\n         // So for now, UTF-8 everywhere !\n         unicodePathExtraField =\n             // Version\n             decToHex(1, 1) +\n             // NameCRC32\n             decToHex(crc32(encodedFileName), 4) +\n             // UnicodeName\n             utfEncodedFileName;\n\n         extraFields +=\n             // Info-ZIP Unicode Path Extra Field\n             \"\\x75\\x70\" +\n             // size\n             decToHex(unicodePathExtraField.length, 2) +\n             // content\n             unicodePathExtraField;\n     }\n\n     if(useUTF8ForComment) {\n\n         unicodeCommentExtraField =\n             // Version\n             decToHex(1, 1) +\n             // CommentCRC32\n             decToHex(crc32(encodedComment), 4) +\n             // UnicodeName\n             utfEncodedComment;\n\n         extraFields +=\n             // Info-ZIP Unicode Path Extra Field\n             \"\\x75\\x63\" +\n             // size\n             decToHex(unicodeCommentExtraField.length, 2) +\n             // content\n             unicodeCommentExtraField;\n     }\n\n     var header = \"\";\n\n     // version needed to extract\n     header += \"\\x0A\\x00\";\n     // general purpose bit flag\n     header += decToHex(bitflag, 2);\n     // compression method\n     header += compression.magic;\n     // last mod file time\n     header += decToHex(dosTime, 2);\n     // last mod file date\n     header += decToHex(dosDate, 2);\n     // crc-32\n     header += decToHex(dataInfo.crc32, 4);\n     // compressed size\n     header += decToHex(dataInfo.compressedSize, 4);\n     // uncompressed size\n     header += decToHex(dataInfo.uncompressedSize, 4);\n     // file name length\n     header += decToHex(encodedFileName.length, 2);\n     // extra field length\n     header += decToHex(extraFields.length, 2);\n\n\n     var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;\n\n     var dirRecord = signature.CENTRAL_FILE_HEADER +\n         // version made by (00: DOS)\n         decToHex(versionMadeBy, 2) +\n         // file header (common to file and central directory)\n         header +\n         // file comment length\n         decToHex(encodedComment.length, 2) +\n         // disk number start\n         \"\\x00\\x00\" +\n         // internal file attributes TODO\n         \"\\x00\\x00\" +\n         // external file attributes\n         decToHex(extFileAttr, 4) +\n         // relative offset of local header\n         decToHex(offset, 4) +\n         // file name\n         encodedFileName +\n         // extra field\n         extraFields +\n         // file comment\n         encodedComment;\n\n     return {\n         fileRecord: fileRecord,\n         dirRecord: dirRecord\n     };\n };\n\n /**\n  * Generate the EOCD record.\n  * @param {Number} entriesCount the number of entries in the zip file.\n  * @param {Number} centralDirLength the length (in bytes) of the central dir.\n  * @param {Number} localDirLength the length (in bytes) of the local dir.\n  * @param {String} comment the zip file comment as a binary string.\n  * @param {Function} encodeFileName the function to encode the comment.\n  * @return {String} the EOCD record.\n  */\n var generateCentralDirectoryEnd = function (entriesCount, centralDirLength, localDirLength, comment, encodeFileName) {\n     var dirEnd = \"\";\n     var encodedComment = utils.transformTo(\"string\", encodeFileName(comment));\n\n     // end of central dir signature\n     dirEnd = signature.CENTRAL_DIRECTORY_END +\n         // number of this disk\n         \"\\x00\\x00\" +\n         // number of the disk with the start of the central directory\n         \"\\x00\\x00\" +\n         // total number of entries in the central directory on this disk\n         decToHex(entriesCount, 2) +\n         // total number of entries in the central directory\n         decToHex(entriesCount, 2) +\n         // size of the central directory   4 bytes\n         decToHex(centralDirLength, 4) +\n         // offset of start of central directory with respect to the starting disk number\n         decToHex(localDirLength, 4) +\n         // .ZIP file comment length\n         decToHex(encodedComment.length, 2) +\n         // .ZIP file comment\n         encodedComment;\n\n     return dirEnd;\n };\n\n /**\n  * Generate data descriptors for a file entry.\n  * @param {Object} streamInfo the hash generated by a worker, containing information\n  * on the file entry.\n  * @return {String} the data descriptors.\n  */\n var generateDataDescriptors = function (streamInfo) {\n     var descriptor = \"\";\n     descriptor = signature.DATA_DESCRIPTOR +\n         // crc-32                          4 bytes\n         decToHex(streamInfo[\"crc32\"], 4) +\n         // compressed size                 4 bytes\n         decToHex(streamInfo[\"compressedSize\"], 4) +\n         // uncompressed size               4 bytes\n         decToHex(streamInfo[\"uncompressedSize\"], 4);\n\n     return descriptor;\n };\n\n\n /**\n  * A worker to concatenate other workers to create a zip file.\n  * @param {Boolean} streamFiles `true` to stream the content of the files,\n  * `false` to accumulate it.\n  * @param {String} comment the comment to use.\n  * @param {String} platform the platform to use, \"UNIX\" or \"DOS\".\n  * @param {Function} encodeFileName the function to encode file names and comments.\n  */\n function ZipFileWorker(streamFiles, comment, platform, encodeFileName) {\n     GenericWorker.call(this, \"ZipFileWorker\");\n     // The number of bytes written so far. This doesn't count accumulated chunks.\n     this.bytesWritten = 0;\n     // The comment of the zip file\n     this.zipComment = comment;\n     // The platform \"generating\" the zip file.\n     this.zipPlatform = platform;\n     // the function to encode file names and comments.\n     this.encodeFileName = encodeFileName;\n     // Should we stream the content of the files ?\n     this.streamFiles = streamFiles;\n     // If `streamFiles` is false, we will need to accumulate the content of the\n     // files to calculate sizes / crc32 (and write them *before* the content).\n     // This boolean indicates if we are accumulating chunks (it will change a lot\n     // during the lifetime of this worker).\n     this.accumulate = false;\n     // The buffer receiving chunks when accumulating content.\n     this.contentBuffer = [];\n     // The list of generated directory records.\n     this.dirRecords = [];\n     // The offset (in bytes) from the beginning of the zip file for the current source.\n     this.currentSourceOffset = 0;\n     // The total number of entries in this zip file.\n     this.entriesCount = 0;\n     // the name of the file currently being added, null when handling the end of the zip file.\n     // Used for the emitted metadata.\n     this.currentFile = null;\n\n\n\n     this._sources = [];\n }\n utils.inherits(ZipFileWorker, GenericWorker);\n\n /**\n  * @see GenericWorker.push\n  */\n ZipFileWorker.prototype.push = function (chunk) {\n\n     var currentFilePercent = chunk.meta.percent || 0;\n     var entriesCount = this.entriesCount;\n     var remainingFiles = this._sources.length;\n\n     if(this.accumulate) {\n         this.contentBuffer.push(chunk);\n     } else {\n         this.bytesWritten += chunk.data.length;\n\n         GenericWorker.prototype.push.call(this, {\n             data : chunk.data,\n             meta : {\n                 currentFile : this.currentFile,\n                 percent : entriesCount ? (currentFilePercent + 100 * (entriesCount - remainingFiles - 1)) / entriesCount : 100\n             }\n         });\n     }\n };\n\n /**\n  * The worker started a new source (an other worker).\n  * @param {Object} streamInfo the streamInfo object from the new source.\n  */\n ZipFileWorker.prototype.openedSource = function (streamInfo) {\n     this.currentSourceOffset = this.bytesWritten;\n     this.currentFile = streamInfo[\"file\"].name;\n\n     var streamedContent = this.streamFiles && !streamInfo[\"file\"].dir;\n\n     // don't stream folders (because they don't have any content)\n     if(streamedContent) {\n         var record = generateZipParts(streamInfo, streamedContent, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n         this.push({\n             data : record.fileRecord,\n             meta : {percent:0}\n         });\n     } else {\n         // we need to wait for the whole file before pushing anything\n         this.accumulate = true;\n     }\n };\n\n /**\n  * The worker finished a source (an other worker).\n  * @param {Object} streamInfo the streamInfo object from the finished source.\n  */\n ZipFileWorker.prototype.closedSource = function (streamInfo) {\n     this.accumulate = false;\n     var streamedContent = this.streamFiles && !streamInfo[\"file\"].dir;\n     var record = generateZipParts(streamInfo, streamedContent, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n\n     this.dirRecords.push(record.dirRecord);\n     if(streamedContent) {\n         // after the streamed file, we put data descriptors\n         this.push({\n             data : generateDataDescriptors(streamInfo),\n             meta : {percent:100}\n         });\n     } else {\n         // the content wasn't streamed, we need to push everything now\n         // first the file record, then the content\n         this.push({\n             data : record.fileRecord,\n             meta : {percent:0}\n         });\n         while(this.contentBuffer.length) {\n             this.push(this.contentBuffer.shift());\n         }\n     }\n     this.currentFile = null;\n };\n\n /**\n  * @see GenericWorker.flush\n  */\n ZipFileWorker.prototype.flush = function () {\n\n     var localDirLength = this.bytesWritten;\n     for(var i = 0; i < this.dirRecords.length; i++) {\n         this.push({\n             data : this.dirRecords[i],\n             meta : {percent:100}\n         });\n     }\n     var centralDirLength = this.bytesWritten - localDirLength;\n\n     var dirEnd = generateCentralDirectoryEnd(this.dirRecords.length, centralDirLength, localDirLength, this.zipComment, this.encodeFileName);\n\n     this.push({\n         data : dirEnd,\n         meta : {percent:100}\n     });\n };\n\n /**\n  * Prepare the next source to be read.\n  */\n ZipFileWorker.prototype.prepareNextSource = function () {\n     this.previous = this._sources.shift();\n     this.openedSource(this.previous.streamInfo);\n     if (this.isPaused) {\n         this.previous.pause();\n     } else {\n         this.previous.resume();\n     }\n };\n\n /**\n  * @see GenericWorker.registerPrevious\n  */\n ZipFileWorker.prototype.registerPrevious = function (previous) {\n     this._sources.push(previous);\n     var self = this;\n\n     previous.on(\"data\", function (chunk) {\n         self.processChunk(chunk);\n     });\n     previous.on(\"end\", function () {\n         self.closedSource(self.previous.streamInfo);\n         if(self._sources.length) {\n             self.prepareNextSource();\n         } else {\n             self.end();\n         }\n     });\n     previous.on(\"error\", function (e) {\n         self.error(e);\n     });\n     return this;\n };\n\n /**\n  * @see GenericWorker.resume\n  */\n ZipFileWorker.prototype.resume = function () {\n     if(!GenericWorker.prototype.resume.call(this)) {\n         return false;\n     }\n\n     if (!this.previous && this._sources.length) {\n         this.prepareNextSource();\n         return true;\n     }\n     if (!this.previous && !this._sources.length && !this.generatedError) {\n         this.end();\n         return true;\n     }\n };\n\n /**\n  * @see GenericWorker.error\n  */\n ZipFileWorker.prototype.error = function (e) {\n     var sources = this._sources;\n     if(!GenericWorker.prototype.error.call(this, e)) {\n         return false;\n     }\n     for(var i = 0; i < sources.length; i++) {\n         try {\n             sources[i].error(e);\n         } catch(e) {\n             // the `error` exploded, nothing to do\n         }\n     }\n     return true;\n };\n\n /**\n  * @see GenericWorker.lock\n  */\n ZipFileWorker.prototype.lock = function () {\n     GenericWorker.prototype.lock.call(this);\n     var sources = this._sources;\n     for(var i = 0; i < sources.length; i++) {\n         sources[i].lock();\n     }\n };\n\n module.exports = ZipFileWorker;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  '../utils': _req,\n  '../stream/GenericWorker': _req0,\n  '../utf8': _req1,\n  '../crc32': _req2,\n  '../signature': _req3,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
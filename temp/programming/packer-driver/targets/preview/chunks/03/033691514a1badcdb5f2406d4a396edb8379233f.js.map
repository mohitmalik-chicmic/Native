{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/assets/Script/Zip.ts"],"names":["_decorator","Component","ImageAsset","SpriteFrame","Texture2D","Sprite","JSZip","ccclass","property","Zip","start","createDemoImage","zip","console","log","loadUsingRequest","remoteZipLink","request","Request","url","method","credentials","fetch","then","response","blob","loadAsync","file","async","data","img","Image","src","onload","imageAsset","tex","image","spriteFrame","texture","packable","RandomSprite","tempArr","i","push","pixelsArr","Uint8Array","reset","_data","width","height","format","PixelFormat","RGBA8888","_compressed","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ImageAsset, SpriteFrame, Texture2D, Sprite, find } from \"cc\";\nconst { ccclass, property } = _decorator;\n// import http from \"http\";\nimport JSZip from \"jszip\";\n\ndeclare global {\n    interface Navigator {\n        msSaveBlob?: (blob: any, defaultName?: string) => boolean;\n    }\n}\n\n/**\n interface OutputByType {\n    base64: string;\n    string: string;\n    text: string;\n    binarystring: string;\n    array: number[];\n    uint8array: Uint8Array;\n    arraybuffer: ArrayBuffer;\n    blob: Blob;\n    nodebuffer: Buffer;\n}\n\n */\n@ccclass(\"Zip\")\nexport class Zip extends Component {\n    @property(Sprite) RandomSprite: Sprite = null;\n    start() {\n        this.createDemoImage();\n        var zip = new JSZip();\n        console.log(\"PPRINTING ZIP\",zip);\n\n        //Picture\n        // this.loadUsingRequest(\"https://drive.google.com/uc?export=download&id=1f0FHWfXE4exUErKzzsOj_7GTuc1FmtEg\");\n\n        // Mask\n        this.loadUsingRequest(\"https://drive.google.com/uc?export=download&id=14MVx2mgsInNdfYx8jQ-6QwwgbPASpxQt\");\n\n        // this.loadFromRemote();\n        // this.loadZip();\n    }\n\n    loadUsingRequest(remoteZipLink: string) {\n        const request = new Request(remoteZipLink);\n        console.log(\"CHECK 2\");\n        \n        const url = request.url;\n        const method = request.method;\n        const credentials = request.credentials;\n        console.log(\"Print url,method,credentials\");\n        console.log(url, method, credentials);\n\n        fetch(request)\n            .then((response) => response.blob())\n            .then((blob) => {\n                console.log(blob);\n\n                JSZip.loadAsync(blob).then((zip) => {\n                    console.log(\"LOADED SUCCESS\", zip);\n                    return zip\n                        .file(\"Mask/maskLeft.png\")\n                        .async(\"base64\")\n                        .then((data: string) => {\n                            let img = new Image();\n                            img.src = \"data:image/png;base64, \" + data;\n                            console.log(data);\n                            img.onload = () => {\n                                let imageAsset: ImageAsset = new ImageAsset(img);\n                                let tex: Texture2D = new Texture2D();\n                                tex.image = imageAsset;\n                                let spriteFrame = new SpriteFrame();\n                                spriteFrame.texture = tex;\n                                spriteFrame.packable = false;\n                                this.RandomSprite.spriteFrame = spriteFrame;\n                            };\n                        });\n                });\n            });\n    }\n\n    createDemoImage() {\n        let tempArr: number[] = [];\n        for (let i: number = 0; i < 16384; i++) {\n            tempArr.push(255);\n            tempArr.push(255);\n            tempArr.push(255);\n            tempArr.push(255);\n        }\n        for (let i: number = 0; i < 16384; i++) {\n            tempArr.push(255);\n            tempArr.push(0);\n            tempArr.push(0);\n            tempArr.push(255);\n        }\n        for (let i: number = 0; i < 16384; i++) {\n            tempArr.push(0);\n            tempArr.push(255);\n            tempArr.push(0);\n            tempArr.push(255);\n        }\n        for (let i: number = 0; i < 16384; i++) {\n            tempArr.push(0);\n            tempArr.push(0);\n            tempArr.push(255);\n            tempArr.push(255);\n        }\n\n        let pixelsArr: ArrayBufferView = new Uint8Array(tempArr);\n        let imageAsset: ImageAsset = new ImageAsset();\n        imageAsset.reset({\n            _data: pixelsArr,\n            width: 256,\n            height: 256,\n            format: Texture2D.PixelFormat.RGBA8888,\n            _compressed: false,\n        });\n        let tex: Texture2D = new Texture2D();\n        tex.image = imageAsset;\n        let spriteFrame = new SpriteFrame();\n        spriteFrame.texture = tex;\n        spriteFrame.packable = false;\n        this.RandomSprite.spriteFrame = spriteFrame;\n    }\n\n    update(deltaTime: number) {}\n}\n"]}
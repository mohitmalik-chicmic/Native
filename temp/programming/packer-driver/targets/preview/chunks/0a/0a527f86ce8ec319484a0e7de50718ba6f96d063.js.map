{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/pako/lib/deflate.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","url","define","exports","require","module","__filename","__dirname","zlib_deflate","utils","strings","msg","ZStream","toString","Object","prototype","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_SYNC_FLUSH","Z_DEFAULT_COMPRESSION","Z_DEFAULT_STRATEGY","Z_DEFLATED","Deflate","options","assign","level","method","chunkSize","windowBits","memLevel","strategy","to","opt","raw","gzip","err","ended","chunks","strm","avail_out","status","deflateInit2","Error","header","deflateSetHeader","dictionary","dict","string2buf","call","Uint8Array","deflateSetDictionary","_dict_set","push","data","mode","_mode","input","next_in","avail_in","length","output","Buf8","next_out","deflate","onEnd","onData","buf2binstring","shrinkBuf","deflateEnd","chunk","result","join","flattenChunks","deflator","deflateRaw","_cjsExports","_Deflate","_deflate","_deflateRaw","_gzip"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './zlib/deflate';\nimport { __cjsMetaURL as _req0} from './utils/common';\nimport { __cjsMetaURL as _req1} from './utils/strings';\nimport { __cjsMetaURL as _req2} from './zlib/messages';\nimport { __cjsMetaURL as _req3} from './zlib/zstream';\nlet _cjsExports;\nlet _Deflate;\nlet _deflate;\nlet _deflateRaw;\nlet _gzip;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n 'use strict';\n\n\n var zlib_deflate = require('./zlib/deflate');\n var utils        = require('./utils/common');\n var strings      = require('./utils/strings');\n var msg          = require('./zlib/messages');\n var ZStream      = require('./zlib/zstream');\n\n var toString = Object.prototype.toString;\n\n /* Public constants ==========================================================*/\n /* ===========================================================================*/\n\n var Z_NO_FLUSH      = 0;\n var Z_FINISH        = 4;\n\n var Z_OK            = 0;\n var Z_STREAM_END    = 1;\n var Z_SYNC_FLUSH    = 2;\n\n var Z_DEFAULT_COMPRESSION = -1;\n\n var Z_DEFAULT_STRATEGY    = 0;\n\n var Z_DEFLATED  = 8;\n\n /* ===========================================================================*/\n\n\n /**\n  * class Deflate\n  *\n  * Generic JS-style wrapper for zlib calls. If you don't need\n  * streaming behaviour - use more simple functions: [[deflate]],\n  * [[deflateRaw]] and [[gzip]].\n  **/\n\n /* internal\n  * Deflate.chunks -> Array\n  *\n  * Chunks of output data, if [[Deflate#onData]] not overridden.\n  **/\n\n /**\n  * Deflate.result -> Uint8Array|Array\n  *\n  * Compressed result, generated by default [[Deflate#onData]]\n  * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n  * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n  * push a chunk with explicit flush (call [[Deflate#push]] with\n  * `Z_SYNC_FLUSH` param).\n  **/\n\n /**\n  * Deflate.err -> Number\n  *\n  * Error code after deflate finished. 0 (Z_OK) on success.\n  * You will not need it in real life, because deflate errors\n  * are possible only on wrong options or bad `onData` / `onEnd`\n  * custom handlers.\n  **/\n\n /**\n  * Deflate.msg -> String\n  *\n  * Error message, if [[Deflate.err]] != 0\n  **/\n\n\n /**\n  * new Deflate(options)\n  * - options (Object): zlib deflate options.\n  *\n  * Creates new deflator instance with specified params. Throws exception\n  * on bad params. Supported options:\n  *\n  * - `level`\n  * - `windowBits`\n  * - `memLevel`\n  * - `strategy`\n  * - `dictionary`\n  *\n  * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n  * for more information on these.\n  *\n  * Additional options, for internal needs:\n  *\n  * - `chunkSize` - size of generated data chunks (16K by default)\n  * - `raw` (Boolean) - do raw deflate\n  * - `gzip` (Boolean) - create gzip wrapper\n  * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n  *    (each char code [0..255])\n  * - `header` (Object) - custom header for gzip\n  *   - `text` (Boolean) - true if compressed data believed to be text\n  *   - `time` (Number) - modification time, unix timestamp\n  *   - `os` (Number) - operation system code\n  *   - `extra` (Array) - array of bytes with extra data (max 65536)\n  *   - `name` (String) - file name (binary string)\n  *   - `comment` (String) - comment (binary string)\n  *   - `hcrc` (Boolean) - true if header crc should be added\n  *\n  * ##### Example:\n  *\n  * ```javascript\n  * var pako = require('pako')\n  *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n  *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n  *\n  * var deflate = new pako.Deflate({ level: 3});\n  *\n  * deflate.push(chunk1, false);\n  * deflate.push(chunk2, true);  // true -> last chunk\n  *\n  * if (deflate.err) { throw new Error(deflate.err); }\n  *\n  * console.log(deflate.result);\n  * ```\n  **/\n function Deflate(options) {\n   if (!(this instanceof Deflate)) return new Deflate(options);\n\n   this.options = utils.assign({\n     level: Z_DEFAULT_COMPRESSION,\n     method: Z_DEFLATED,\n     chunkSize: 16384,\n     windowBits: 15,\n     memLevel: 8,\n     strategy: Z_DEFAULT_STRATEGY,\n     to: ''\n   }, options || {});\n\n   var opt = this.options;\n\n   if (opt.raw && (opt.windowBits > 0)) {\n     opt.windowBits = -opt.windowBits;\n   }\n\n   else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n     opt.windowBits += 16;\n   }\n\n   this.err    = 0;      // error code, if happens (0 = Z_OK)\n   this.msg    = '';     // error message\n   this.ended  = false;  // used to avoid multiple onEnd() calls\n   this.chunks = [];     // chunks of compressed data\n\n   this.strm = new ZStream();\n   this.strm.avail_out = 0;\n\n   var status = zlib_deflate.deflateInit2(\n     this.strm,\n     opt.level,\n     opt.method,\n     opt.windowBits,\n     opt.memLevel,\n     opt.strategy\n   );\n\n   if (status !== Z_OK) {\n     throw new Error(msg[status]);\n   }\n\n   if (opt.header) {\n     zlib_deflate.deflateSetHeader(this.strm, opt.header);\n   }\n\n   if (opt.dictionary) {\n     var dict;\n     // Convert data if needed\n     if (typeof opt.dictionary === 'string') {\n       // If we need to compress text, change encoding to utf8.\n       dict = strings.string2buf(opt.dictionary);\n     } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n       dict = new Uint8Array(opt.dictionary);\n     } else {\n       dict = opt.dictionary;\n     }\n\n     status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n     if (status !== Z_OK) {\n       throw new Error(msg[status]);\n     }\n\n     this._dict_set = true;\n   }\n }\n\n /**\n  * Deflate#push(data[, mode]) -> Boolean\n  * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n  *   converted to utf8 byte sequence.\n  * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n  *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n  *\n  * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n  * new compressed chunks. Returns `true` on success. The last data block must have\n  * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n  * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n  * can use mode Z_SYNC_FLUSH, keeping the compression context.\n  *\n  * On fail call [[Deflate#onEnd]] with error code and return false.\n  *\n  * We strongly recommend to use `Uint8Array` on input for best speed (output\n  * array format is detected automatically). Also, don't skip last param and always\n  * use the same type in your code (boolean or number). That will improve JS speed.\n  *\n  * For regular `Array`-s make sure all elements are [0..255].\n  *\n  * ##### Example\n  *\n  * ```javascript\n  * push(chunk, false); // push one of data chunks\n  * ...\n  * push(chunk, true);  // push last chunk\n  * ```\n  **/\n Deflate.prototype.push = function (data, mode) {\n   var strm = this.strm;\n   var chunkSize = this.options.chunkSize;\n   var status, _mode;\n\n   if (this.ended) { return false; }\n\n   _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n   // Convert data if needed\n   if (typeof data === 'string') {\n     // If we need to compress text, change encoding to utf8.\n     strm.input = strings.string2buf(data);\n   } else if (toString.call(data) === '[object ArrayBuffer]') {\n     strm.input = new Uint8Array(data);\n   } else {\n     strm.input = data;\n   }\n\n   strm.next_in = 0;\n   strm.avail_in = strm.input.length;\n\n   do {\n     if (strm.avail_out === 0) {\n       strm.output = new utils.Buf8(chunkSize);\n       strm.next_out = 0;\n       strm.avail_out = chunkSize;\n     }\n     status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n     if (status !== Z_STREAM_END && status !== Z_OK) {\n       this.onEnd(status);\n       this.ended = true;\n       return false;\n     }\n     if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n       if (this.options.to === 'string') {\n         this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n       } else {\n         this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n       }\n     }\n   } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n   // Finalize on the last chunk.\n   if (_mode === Z_FINISH) {\n     status = zlib_deflate.deflateEnd(this.strm);\n     this.onEnd(status);\n     this.ended = true;\n     return status === Z_OK;\n   }\n\n   // callback interim results if Z_SYNC_FLUSH.\n   if (_mode === Z_SYNC_FLUSH) {\n     this.onEnd(Z_OK);\n     strm.avail_out = 0;\n     return true;\n   }\n\n   return true;\n };\n\n\n /**\n  * Deflate#onData(chunk) -> Void\n  * - chunk (Uint8Array|Array|String): output data. Type of array depends\n  *   on js engine support. When string output requested, each chunk\n  *   will be string.\n  *\n  * By default, stores data blocks in `chunks[]` property and glue\n  * those in `onEnd`. Override this handler, if you need another behaviour.\n  **/\n Deflate.prototype.onData = function (chunk) {\n   this.chunks.push(chunk);\n };\n\n\n /**\n  * Deflate#onEnd(status) -> Void\n  * - status (Number): deflate status. 0 (Z_OK) on success,\n  *   other if not.\n  *\n  * Called once after you tell deflate that the input stream is\n  * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n  * or if an error happened. By default - join collected chunks,\n  * free memory and fill `results` / `err` properties.\n  **/\n Deflate.prototype.onEnd = function (status) {\n   // On success - join\n   if (status === Z_OK) {\n     if (this.options.to === 'string') {\n       this.result = this.chunks.join('');\n     } else {\n       this.result = utils.flattenChunks(this.chunks);\n     }\n   }\n   this.chunks = [];\n   this.err = status;\n   this.msg = this.strm.msg;\n };\n\n\n /**\n  * deflate(data[, options]) -> Uint8Array|Array|String\n  * - data (Uint8Array|Array|String): input data to compress.\n  * - options (Object): zlib deflate options.\n  *\n  * Compress `data` with deflate algorithm and `options`.\n  *\n  * Supported options are:\n  *\n  * - level\n  * - windowBits\n  * - memLevel\n  * - strategy\n  * - dictionary\n  *\n  * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n  * for more information on these.\n  *\n  * Sugar (options):\n  *\n  * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n  *   negative windowBits implicitly.\n  * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n  *    (each char code [0..255])\n  *\n  * ##### Example:\n  *\n  * ```javascript\n  * var pako = require('pako')\n  *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n  *\n  * console.log(pako.deflate(data));\n  * ```\n  **/\n function deflate(input, options) {\n   var deflator = new Deflate(options);\n\n   deflator.push(input, true);\n\n   // That will never happens, if you don't cheat with options :)\n   if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n   return deflator.result;\n }\n\n\n /**\n  * deflateRaw(data[, options]) -> Uint8Array|Array|String\n  * - data (Uint8Array|Array|String): input data to compress.\n  * - options (Object): zlib deflate options.\n  *\n  * The same as [[deflate]], but creates raw data, without wrapper\n  * (header and adler32 crc).\n  **/\n function deflateRaw(input, options) {\n   options = options || {};\n   options.raw = true;\n   return deflate(input, options);\n }\n\n\n /**\n  * gzip(data[, options]) -> Uint8Array|Array|String\n  * - data (Uint8Array|Array|String): input data to compress.\n  * - options (Object): zlib deflate options.\n  *\n  * The same as [[deflate]], but create gzip wrapper instead of\n  * deflate one.\n  **/\n function gzip(input, options) {\n   options = options || {};\n   options.gzip = true;\n   return deflate(input, options);\n }\n\n\n exports.Deflate = Deflate;\n exports.deflate = deflate;\n exports.deflateRaw = deflateRaw;\n exports.gzip = gzip;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_Deflate = module.exports.Deflate;\n_deflate = module.exports.deflate;\n_deflateRaw = module.exports.deflateRaw;\n_gzip = module.exports.gzip;\n\n}, () => ({\n  './zlib/deflate': _req,\n  './utils/common': _req0,\n  './utils/strings': _req1,\n  './zlib/messages': _req2,\n  './zlib/zstream': _req3,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/jszip/lib/generate/index.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","compressions","ZipFileWorker","getCompression","fileCompression","zipCompression","compressionName","compression","Error","generateWorker","zip","options","comment","zipFileWorker","streamFiles","platform","encodeFileName","entriesCount","forEach","relativePath","file","compressionOptions","dir","date","_compressWorker","withStreamInfo","name","unixPermissions","dosPermissions","pipe","e","error","_cjsExports","_generateWorker"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;;8BAGHA,Y,GAAe,cAAYE,G;;AACjCJ,MAAAA,UAAU,CAACK,MAAX,CAAkBH,YAAlB,EAAgC,UAAUI,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC;;AAEA,YAAIC,YAAY,GAAGJ,OAAO,CAAC,iBAAD,CAA1B;;AACA,YAAIK,aAAa,GAAGL,OAAO,CAAC,iBAAD,CAA3B;AAEA;AACD;AACA;AACA;AACA;AACA;;;AACC,YAAIM,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,eAAV,EAA2BC,cAA3B,EAA2C;AAE5D,cAAIC,eAAe,GAAGF,eAAe,IAAIC,cAAzC;AACA,cAAIE,WAAW,GAAGN,YAAY,CAACK,eAAD,CAA9B;;AACA,cAAI,CAACC,WAAL,EAAkB;AACd,kBAAM,IAAIC,KAAJ,CAAUF,eAAe,GAAG,sCAA5B,CAAN;AACH;;AACD,iBAAOC,WAAP;AACH,SARD;AAUA;AACD;AACA;AACA;AACA;AACA;;;AACCX,QAAAA,OAAO,CAACa,cAAR,GAAyB,UAAUC,GAAV,EAAeC,OAAf,EAAwBC,OAAxB,EAAiC;AAEtD,cAAIC,aAAa,GAAG,IAAIX,aAAJ,CAAkBS,OAAO,CAACG,WAA1B,EAAuCF,OAAvC,EAAgDD,OAAO,CAACI,QAAxD,EAAkEJ,OAAO,CAACK,cAA1E,CAApB;AACA,cAAIC,YAAY,GAAG,CAAnB;;AACA,cAAI;AAEAP,YAAAA,GAAG,CAACQ,OAAJ,CAAY,UAAUC,YAAV,EAAwBC,IAAxB,EAA8B;AACtCH,cAAAA,YAAY;AACZ,kBAAIV,WAAW,GAAGJ,cAAc,CAACiB,IAAI,CAACT,OAAL,CAAaJ,WAAd,EAA2BI,OAAO,CAACJ,WAAnC,CAAhC;AACA,kBAAIc,kBAAkB,GAAGD,IAAI,CAACT,OAAL,CAAaU,kBAAb,IAAmCV,OAAO,CAACU,kBAA3C,IAAiE,EAA1F;AACA,kBAAIC,GAAG,GAAGF,IAAI,CAACE,GAAf;AAAA,kBAAoBC,IAAI,GAAGH,IAAI,CAACG,IAAhC;;AAEAH,cAAAA,IAAI,CAACI,eAAL,CAAqBjB,WAArB,EAAkCc,kBAAlC,EACKI,cADL,CACoB,MADpB,EAC4B;AACpBC,gBAAAA,IAAI,EAAGP,YADa;AAEpBG,gBAAAA,GAAG,EAAGA,GAFc;AAGpBC,gBAAAA,IAAI,EAAGA,IAHa;AAIpBX,gBAAAA,OAAO,EAAGQ,IAAI,CAACR,OAAL,IAAgB,EAJN;AAKpBe,gBAAAA,eAAe,EAAGP,IAAI,CAACO,eALH;AAMpBC,gBAAAA,cAAc,EAAGR,IAAI,CAACQ;AANF,eAD5B,EASKC,IATL,CASUhB,aATV;AAUH,aAhBD;AAiBAA,YAAAA,aAAa,CAACI,YAAd,GAA6BA,YAA7B;AACH,WApBD,CAoBE,OAAOa,CAAP,EAAU;AACRjB,YAAAA,aAAa,CAACkB,KAAd,CAAoBD,CAApB;AACH;;AAED,iBAAOjB,aAAP;AACH,SA7BD,CA/B0F,CA+D3F;;;AAEA,2BAAAmB,WAAW,GAAGlC,MAAM,CAACF,OAArB;;AACAqC,QAAAA,eAAe,GAAGnC,MAAM,CAACF,OAAP,CAAea,cAAjC;AAEC,OApED,EAoEG,OAAO;AACR,2BAAmBlB,IADX;AAER,2BAAmBE;AAFX,OAAP,CApEH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from '../compressions';\nimport { __cjsMetaURL as _req0} from './ZipFileWorker';\nlet _cjsExports;\nlet _generateWorker;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n\n var compressions = require(\"../compressions\");\n var ZipFileWorker = require(\"./ZipFileWorker\");\n\n /**\n  * Find the compression to use.\n  * @param {String} fileCompression the compression defined at the file level, if any.\n  * @param {String} zipCompression the compression defined at the load() level.\n  * @return {Object} the compression object to use.\n  */\n var getCompression = function (fileCompression, zipCompression) {\n\n     var compressionName = fileCompression || zipCompression;\n     var compression = compressions[compressionName];\n     if (!compression) {\n         throw new Error(compressionName + \" is not a valid compression method !\");\n     }\n     return compression;\n };\n\n /**\n  * Create a worker to generate a zip file.\n  * @param {JSZip} zip the JSZip instance at the right root level.\n  * @param {Object} options to generate the zip file.\n  * @param {String} comment the comment to use.\n  */\n exports.generateWorker = function (zip, options, comment) {\n\n     var zipFileWorker = new ZipFileWorker(options.streamFiles, comment, options.platform, options.encodeFileName);\n     var entriesCount = 0;\n     try {\n\n         zip.forEach(function (relativePath, file) {\n             entriesCount++;\n             var compression = getCompression(file.options.compression, options.compression);\n             var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};\n             var dir = file.dir, date = file.date;\n\n             file._compressWorker(compression, compressionOptions)\n                 .withStreamInfo(\"file\", {\n                     name : relativePath,\n                     dir : dir,\n                     date : date,\n                     comment : file.comment || \"\",\n                     unixPermissions : file.unixPermissions,\n                     dosPermissions : file.dosPermissions\n                 })\n                 .pipe(zipFileWorker);\n         });\n         zipFileWorker.entriesCount = entriesCount;\n     } catch (e) {\n         zipFileWorker.error(e);\n     }\n\n     return zipFileWorker;\n };\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_generateWorker = module.exports.generateWorker;\n\n}, () => ({\n  '../compressions': _req,\n  './ZipFileWorker': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
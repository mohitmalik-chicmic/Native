{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/jszip/lib/stream/Crc32Probe.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","url","define","exports","require","module","__filename","__dirname","GenericWorker","crc32","utils","Crc32Probe","call","withStreamInfo","inherits","prototype","processChunk","chunk","streamInfo","data","push","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;AACgBE,MAAAA,K,iBAAhBF,Y;;;8BAEHA,Y,GAAe,cAAYG,G;;AACjCL,MAAAA,UAAU,CAACM,MAAX,CAAkBJ,YAAlB,EAAgC,UAAUK,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC;;AAEA,YAAIC,aAAa,GAAGJ,OAAO,CAAC,iBAAD,CAA3B;;AACA,YAAIK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAAnB;;AACA,YAAIM,KAAK,GAAGN,OAAO,CAAC,UAAD,CAAnB;AAEA;AACD;AACA;AACA;;;AACC,iBAASO,UAAT,GAAsB;AAClBH,UAAAA,aAAa,CAACI,IAAd,CAAmB,IAAnB,EAAyB,YAAzB;AACA,eAAKC,cAAL,CAAoB,OAApB,EAA6B,CAA7B;AACH;;AACDH,QAAAA,KAAK,CAACI,QAAN,CAAeH,UAAf,EAA2BH,aAA3B;AAEA;AACD;AACA;;AACCG,QAAAA,UAAU,CAACI,SAAX,CAAqBC,YAArB,GAAoC,UAAUC,KAAV,EAAiB;AACjD,eAAKC,UAAL,CAAgBT,KAAhB,GAAwBA,KAAK,CAACQ,KAAK,CAACE,IAAP,EAAa,KAAKD,UAAL,CAAgBT,KAAhB,IAAyB,CAAtC,CAA7B;AACA,eAAKW,IAAL,CAAUH,KAAV;AACH,SAHD;;AAIAZ,QAAAA,MAAM,CAACF,OAAP,GAAiBQ,UAAjB,CA3B0F,CA8B3F;;AAEA,2BAAAU,WAAW,GAAGhB,MAAM,CAACF,OAArB;AAGC,OAnCD,EAmCG,OAAO;AACR,2BAAmBN,IADX;AAER,oBAAYE,KAFJ;AAGR,oBAAYC;AAHJ,OAAP,CAnCH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './GenericWorker';\nimport { __cjsMetaURL as _req0} from '../crc32';\nimport { __cjsMetaURL as _req1} from '../utils';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n\n var GenericWorker = require(\"./GenericWorker\");\n var crc32 = require(\"../crc32\");\n var utils = require(\"../utils\");\n\n /**\n  * A worker which calculate the crc32 of the data flowing through.\n  * @constructor\n  */\n function Crc32Probe() {\n     GenericWorker.call(this, \"Crc32Probe\");\n     this.withStreamInfo(\"crc32\", 0);\n }\n utils.inherits(Crc32Probe, GenericWorker);\n\n /**\n  * @see GenericWorker.processChunk\n  */\n Crc32Probe.prototype.processChunk = function (chunk) {\n     this.streamInfo.crc32 = crc32(chunk.data, this.streamInfo.crc32 || 0);\n     this.push(chunk);\n };\n module.exports = Crc32Probe;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './GenericWorker': _req,\n  '../crc32': _req0,\n  '../utils': _req1,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/jszip/lib/stream/ConvertWorker.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","url","define","exports","require","module","__filename","__dirname","GenericWorker","utils","ConvertWorker","destType","call","inherits","prototype","processChunk","chunk","push","data","transformTo","meta","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,iBAAhBC,Y;;AACgBC,MAAAA,K,iBAAhBD,Y;;;8BAEHA,Y,GAAe,cAAYE,G;;AACjCJ,MAAAA,UAAU,CAACK,MAAX,CAAkBH,YAAlB,EAAgC,UAAUI,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC;;AAEA,YAAIC,aAAa,GAAGJ,OAAO,CAAC,iBAAD,CAA3B;;AACA,YAAIK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAAnB;AAEA;AACD;AACA;AACA;AACA;;;AACC,iBAASM,aAAT,CAAuBC,QAAvB,EAAiC;AAC7BH,UAAAA,aAAa,CAACI,IAAd,CAAmB,IAAnB,EAAyB,sBAAsBD,QAA/C;AACA,eAAKA,QAAL,GAAgBA,QAAhB;AACH;;AACDF,QAAAA,KAAK,CAACI,QAAN,CAAeH,aAAf,EAA8BF,aAA9B;AAEA;AACD;AACA;;AACCE,QAAAA,aAAa,CAACI,SAAd,CAAwBC,YAAxB,GAAuC,UAAUC,KAAV,EAAiB;AACpD,eAAKC,IAAL,CAAU;AACNC,YAAAA,IAAI,EAAGT,KAAK,CAACU,WAAN,CAAkB,KAAKR,QAAvB,EAAiCK,KAAK,CAACE,IAAvC,CADD;AAENE,YAAAA,IAAI,EAAGJ,KAAK,CAACI;AAFP,WAAV;AAIH,SALD;;AAMAf,QAAAA,MAAM,CAACF,OAAP,GAAiBO,aAAjB,CA7B0F,CAgC3F;;AAEA,2BAAAW,WAAW,GAAGhB,MAAM,CAACF,OAArB;AAGC,OArCD,EAqCG,OAAO;AACR,2BAAmBL,IADX;AAER,oBAAYE;AAFJ,OAAP,CArCH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './GenericWorker';\nimport { __cjsMetaURL as _req0} from '../utils';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n\n var GenericWorker = require(\"./GenericWorker\");\n var utils = require(\"../utils\");\n\n /**\n  * A worker which convert chunks to a specified type.\n  * @constructor\n  * @param {String} destType the destination type.\n  */\n function ConvertWorker(destType) {\n     GenericWorker.call(this, \"ConvertWorker to \" + destType);\n     this.destType = destType;\n }\n utils.inherits(ConvertWorker, GenericWorker);\n\n /**\n  * @see GenericWorker.processChunk\n  */\n ConvertWorker.prototype.processChunk = function (chunk) {\n     this.push({\n         data : utils.transformTo(this.destType, chunk.data),\n         meta : chunk.meta\n     });\n };\n module.exports = ConvertWorker;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  './GenericWorker': _req,\n  '../utils': _req0,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
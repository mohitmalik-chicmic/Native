{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/pako/lib/inflate.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","_req3","_req4","_req5","url","define","exports","require","module","__filename","__dirname","zlib_inflate","utils","strings","c","msg","ZStream","GZheader","toString","Object","prototype","Inflate","options","assign","chunkSize","windowBits","to","opt","raw","err","ended","chunks","strm","avail_out","status","inflateInit2","Z_OK","Error","header","inflateGetHeader","dictionary","string2buf","call","Uint8Array","inflateSetDictionary","push","data","mode","_mode","next_out_utf8","tail","utf8str","allowBufError","Z_FINISH","Z_NO_FLUSH","input","binstring2buf","next_in","avail_in","length","output","Buf8","next_out","inflate","Z_NEED_DICT","Z_BUF_ERROR","Z_STREAM_END","onEnd","Z_SYNC_FLUSH","utf8border","buf2string","arraySet","onData","shrinkBuf","inflateEnd","chunk","result","join","flattenChunks","inflator","inflateRaw","ungzip","_cjsExports","_Inflate","_inflate","_inflateRaw","_ungzip"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from './zlib/inflate';\nimport { __cjsMetaURL as _req0} from './utils/common';\nimport { __cjsMetaURL as _req1} from './utils/strings';\nimport { __cjsMetaURL as _req2} from './zlib/constants';\nimport { __cjsMetaURL as _req3} from './zlib/messages';\nimport { __cjsMetaURL as _req4} from './zlib/zstream';\nimport { __cjsMetaURL as _req5} from './zlib/gzheader';\nlet _cjsExports;\nlet _Inflate;\nlet _inflate;\nlet _inflateRaw;\nlet _ungzip;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n 'use strict';\n\n\n var zlib_inflate = require('./zlib/inflate');\n var utils        = require('./utils/common');\n var strings      = require('./utils/strings');\n var c            = require('./zlib/constants');\n var msg          = require('./zlib/messages');\n var ZStream      = require('./zlib/zstream');\n var GZheader     = require('./zlib/gzheader');\n\n var toString = Object.prototype.toString;\n\n /**\n  * class Inflate\n  *\n  * Generic JS-style wrapper for zlib calls. If you don't need\n  * streaming behaviour - use more simple functions: [[inflate]]\n  * and [[inflateRaw]].\n  **/\n\n /* internal\n  * inflate.chunks -> Array\n  *\n  * Chunks of output data, if [[Inflate#onData]] not overridden.\n  **/\n\n /**\n  * Inflate.result -> Uint8Array|Array|String\n  *\n  * Uncompressed result, generated by default [[Inflate#onData]]\n  * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n  * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n  * push a chunk with explicit flush (call [[Inflate#push]] with\n  * `Z_SYNC_FLUSH` param).\n  **/\n\n /**\n  * Inflate.err -> Number\n  *\n  * Error code after inflate finished. 0 (Z_OK) on success.\n  * Should be checked if broken data possible.\n  **/\n\n /**\n  * Inflate.msg -> String\n  *\n  * Error message, if [[Inflate.err]] != 0\n  **/\n\n\n /**\n  * new Inflate(options)\n  * - options (Object): zlib inflate options.\n  *\n  * Creates new inflator instance with specified params. Throws exception\n  * on bad params. Supported options:\n  *\n  * - `windowBits`\n  * - `dictionary`\n  *\n  * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n  * for more information on these.\n  *\n  * Additional options, for internal needs:\n  *\n  * - `chunkSize` - size of generated data chunks (16K by default)\n  * - `raw` (Boolean) - do raw inflate\n  * - `to` (String) - if equal to 'string', then result will be converted\n  *   from utf8 to utf16 (javascript) string. When string output requested,\n  *   chunk length can differ from `chunkSize`, depending on content.\n  *\n  * By default, when no options set, autodetect deflate/gzip data format via\n  * wrapper header.\n  *\n  * ##### Example:\n  *\n  * ```javascript\n  * var pako = require('pako')\n  *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n  *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n  *\n  * var inflate = new pako.Inflate({ level: 3});\n  *\n  * inflate.push(chunk1, false);\n  * inflate.push(chunk2, true);  // true -> last chunk\n  *\n  * if (inflate.err) { throw new Error(inflate.err); }\n  *\n  * console.log(inflate.result);\n  * ```\n  **/\n function Inflate(options) {\n   if (!(this instanceof Inflate)) return new Inflate(options);\n\n   this.options = utils.assign({\n     chunkSize: 16384,\n     windowBits: 0,\n     to: ''\n   }, options || {});\n\n   var opt = this.options;\n\n   // Force window size for `raw` data, if not set directly,\n   // because we have no header for autodetect.\n   if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n     opt.windowBits = -opt.windowBits;\n     if (opt.windowBits === 0) { opt.windowBits = -15; }\n   }\n\n   // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n   if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n       !(options && options.windowBits)) {\n     opt.windowBits += 32;\n   }\n\n   // Gzip header has no info about windows size, we can do autodetect only\n   // for deflate. So, if window size not set, force it to max when gzip possible\n   if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n     // bit 3 (16) -> gzipped data\n     // bit 4 (32) -> autodetect gzip/deflate\n     if ((opt.windowBits & 15) === 0) {\n       opt.windowBits |= 15;\n     }\n   }\n\n   this.err    = 0;      // error code, if happens (0 = Z_OK)\n   this.msg    = '';     // error message\n   this.ended  = false;  // used to avoid multiple onEnd() calls\n   this.chunks = [];     // chunks of compressed data\n\n   this.strm   = new ZStream();\n   this.strm.avail_out = 0;\n\n   var status  = zlib_inflate.inflateInit2(\n     this.strm,\n     opt.windowBits\n   );\n\n   if (status !== c.Z_OK) {\n     throw new Error(msg[status]);\n   }\n\n   this.header = new GZheader();\n\n   zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n   // Setup dictionary\n   if (opt.dictionary) {\n     // Convert data if needed\n     if (typeof opt.dictionary === 'string') {\n       opt.dictionary = strings.string2buf(opt.dictionary);\n     } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n       opt.dictionary = new Uint8Array(opt.dictionary);\n     }\n     if (opt.raw) { //In raw mode we need to set the dictionary early\n       status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n       if (status !== c.Z_OK) {\n         throw new Error(msg[status]);\n       }\n     }\n   }\n }\n\n /**\n  * Inflate#push(data[, mode]) -> Boolean\n  * - data (Uint8Array|Array|ArrayBuffer|String): input data\n  * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n  *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n  *\n  * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n  * new output chunks. Returns `true` on success. The last data block must have\n  * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n  * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n  * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n  *\n  * On fail call [[Inflate#onEnd]] with error code and return false.\n  *\n  * We strongly recommend to use `Uint8Array` on input for best speed (output\n  * format is detected automatically). Also, don't skip last param and always\n  * use the same type in your code (boolean or number). That will improve JS speed.\n  *\n  * For regular `Array`-s make sure all elements are [0..255].\n  *\n  * ##### Example\n  *\n  * ```javascript\n  * push(chunk, false); // push one of data chunks\n  * ...\n  * push(chunk, true);  // push last chunk\n  * ```\n  **/\n Inflate.prototype.push = function (data, mode) {\n   var strm = this.strm;\n   var chunkSize = this.options.chunkSize;\n   var dictionary = this.options.dictionary;\n   var status, _mode;\n   var next_out_utf8, tail, utf8str;\n\n   // Flag to properly process Z_BUF_ERROR on testing inflate call\n   // when we check that all output data was flushed.\n   var allowBufError = false;\n\n   if (this.ended) { return false; }\n   _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n   // Convert data if needed\n   if (typeof data === 'string') {\n     // Only binary strings can be decompressed on practice\n     strm.input = strings.binstring2buf(data);\n   } else if (toString.call(data) === '[object ArrayBuffer]') {\n     strm.input = new Uint8Array(data);\n   } else {\n     strm.input = data;\n   }\n\n   strm.next_in = 0;\n   strm.avail_in = strm.input.length;\n\n   do {\n     if (strm.avail_out === 0) {\n       strm.output = new utils.Buf8(chunkSize);\n       strm.next_out = 0;\n       strm.avail_out = chunkSize;\n     }\n\n     status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n     if (status === c.Z_NEED_DICT && dictionary) {\n       status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n     }\n\n     if (status === c.Z_BUF_ERROR && allowBufError === true) {\n       status = c.Z_OK;\n       allowBufError = false;\n     }\n\n     if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n       this.onEnd(status);\n       this.ended = true;\n       return false;\n     }\n\n     if (strm.next_out) {\n       if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n         if (this.options.to === 'string') {\n\n           next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n           tail = strm.next_out - next_out_utf8;\n           utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n           // move tail\n           strm.next_out = tail;\n           strm.avail_out = chunkSize - tail;\n           if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n           this.onData(utf8str);\n\n         } else {\n           this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n         }\n       }\n     }\n\n     // When no more input data, we should check that internal inflate buffers\n     // are flushed. The only way to do it when avail_out = 0 - run one more\n     // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n     // Here we set flag to process this error properly.\n     //\n     // NOTE. Deflate does not return error in this case and does not needs such\n     // logic.\n     if (strm.avail_in === 0 && strm.avail_out === 0) {\n       allowBufError = true;\n     }\n\n   } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n   if (status === c.Z_STREAM_END) {\n     _mode = c.Z_FINISH;\n   }\n\n   // Finalize on the last chunk.\n   if (_mode === c.Z_FINISH) {\n     status = zlib_inflate.inflateEnd(this.strm);\n     this.onEnd(status);\n     this.ended = true;\n     return status === c.Z_OK;\n   }\n\n   // callback interim results if Z_SYNC_FLUSH.\n   if (_mode === c.Z_SYNC_FLUSH) {\n     this.onEnd(c.Z_OK);\n     strm.avail_out = 0;\n     return true;\n   }\n\n   return true;\n };\n\n\n /**\n  * Inflate#onData(chunk) -> Void\n  * - chunk (Uint8Array|Array|String): output data. Type of array depends\n  *   on js engine support. When string output requested, each chunk\n  *   will be string.\n  *\n  * By default, stores data blocks in `chunks[]` property and glue\n  * those in `onEnd`. Override this handler, if you need another behaviour.\n  **/\n Inflate.prototype.onData = function (chunk) {\n   this.chunks.push(chunk);\n };\n\n\n /**\n  * Inflate#onEnd(status) -> Void\n  * - status (Number): inflate status. 0 (Z_OK) on success,\n  *   other if not.\n  *\n  * Called either after you tell inflate that the input stream is\n  * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n  * or if an error happened. By default - join collected chunks,\n  * free memory and fill `results` / `err` properties.\n  **/\n Inflate.prototype.onEnd = function (status) {\n   // On success - join\n   if (status === c.Z_OK) {\n     if (this.options.to === 'string') {\n       // Glue & convert here, until we teach pako to send\n       // utf8 aligned strings to onData\n       this.result = this.chunks.join('');\n     } else {\n       this.result = utils.flattenChunks(this.chunks);\n     }\n   }\n   this.chunks = [];\n   this.err = status;\n   this.msg = this.strm.msg;\n };\n\n\n /**\n  * inflate(data[, options]) -> Uint8Array|Array|String\n  * - data (Uint8Array|Array|String): input data to decompress.\n  * - options (Object): zlib inflate options.\n  *\n  * Decompress `data` with inflate/ungzip and `options`. Autodetect\n  * format via wrapper header by default. That's why we don't provide\n  * separate `ungzip` method.\n  *\n  * Supported options are:\n  *\n  * - windowBits\n  *\n  * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n  * for more information.\n  *\n  * Sugar (options):\n  *\n  * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n  *   negative windowBits implicitly.\n  * - `to` (String) - if equal to 'string', then result will be converted\n  *   from utf8 to utf16 (javascript) string. When string output requested,\n  *   chunk length can differ from `chunkSize`, depending on content.\n  *\n  *\n  * ##### Example:\n  *\n  * ```javascript\n  * var pako = require('pako')\n  *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n  *   , output;\n  *\n  * try {\n  *   output = pako.inflate(input);\n  * } catch (err)\n  *   console.log(err);\n  * }\n  * ```\n  **/\n function inflate(input, options) {\n   var inflator = new Inflate(options);\n\n   inflator.push(input, true);\n\n   // That will never happens, if you don't cheat with options :)\n   if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n   return inflator.result;\n }\n\n\n /**\n  * inflateRaw(data[, options]) -> Uint8Array|Array|String\n  * - data (Uint8Array|Array|String): input data to decompress.\n  * - options (Object): zlib inflate options.\n  *\n  * The same as [[inflate]], but creates raw data, without wrapper\n  * (header and adler32 crc).\n  **/\n function inflateRaw(input, options) {\n   options = options || {};\n   options.raw = true;\n   return inflate(input, options);\n }\n\n\n /**\n  * ungzip(data[, options]) -> Uint8Array|Array|String\n  * - data (Uint8Array|Array|String): input data to decompress.\n  * - options (Object): zlib inflate options.\n  *\n  * Just shortcut to [[inflate]], because it autodetects format\n  * by header.content. Done for convenience.\n  **/\n\n\n exports.Inflate = Inflate;\n exports.inflate = inflate;\n exports.inflateRaw = inflateRaw;\n exports.ungzip  = inflate;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n_Inflate = module.exports.Inflate;\n_inflate = module.exports.inflate;\n_inflateRaw = module.exports.inflateRaw;\n_ungzip = module.exports.ungzip;\n\n}, () => ({\n  './zlib/inflate': _req,\n  './utils/common': _req0,\n  './utils/strings': _req1,\n  './zlib/constants': _req2,\n  './zlib/messages': _req3,\n  './zlib/zstream': _req4,\n  './zlib/gzheader': _req5,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
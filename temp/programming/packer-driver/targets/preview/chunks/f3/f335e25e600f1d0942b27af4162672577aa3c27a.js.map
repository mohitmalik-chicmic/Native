{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/node_modules/jszip/lib/stream/GenericWorker.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","GenericWorker","name","streamInfo","generatedError","extraStreamInfo","isPaused","isFinished","isLocked","_listeners","previous","prototype","push","chunk","emit","end","flush","cleanUp","e","error","on","listener","arg","i","length","call","pipe","next","registerPrevious","Error","mergeStreamInfo","self","processChunk","pause","resume","withError","withStreamInfo","key","value","Object","hasOwnProperty","lock","toString","me","_cjsExports"],"mappings":"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","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n \"use strict\";\n\n /**\n  * A worker that does nothing but passing chunks to the next one. This is like\n  * a nodejs stream but with some differences. On the good side :\n  * - it works on IE 6-9 without any issue / polyfill\n  * - it weights less than the full dependencies bundled with browserify\n  * - it forwards errors (no need to declare an error handler EVERYWHERE)\n  *\n  * A chunk is an object with 2 attributes : `meta` and `data`. The former is an\n  * object containing anything (`percent` for example), see each worker for more\n  * details. The latter is the real data (String, Uint8Array, etc).\n  *\n  * @constructor\n  * @param {String} name the name of the stream (mainly used for debugging purposes)\n  */\n function GenericWorker(name) {\n     // the name of the worker\n     this.name = name || \"default\";\n     // an object containing metadata about the workers chain\n     this.streamInfo = {};\n     // an error which happened when the worker was paused\n     this.generatedError = null;\n     // an object containing metadata to be merged by this worker into the general metadata\n     this.extraStreamInfo = {};\n     // true if the stream is paused (and should not do anything), false otherwise\n     this.isPaused = true;\n     // true if the stream is finished (and should not do anything), false otherwise\n     this.isFinished = false;\n     // true if the stream is locked to prevent further structure updates (pipe), false otherwise\n     this.isLocked = false;\n     // the event listeners\n     this._listeners = {\n         \"data\":[],\n         \"end\":[],\n         \"error\":[]\n     };\n     // the previous worker, if any\n     this.previous = null;\n }\n\n GenericWorker.prototype = {\n     /**\n      * Push a chunk to the next workers.\n      * @param {Object} chunk the chunk to push\n      */\n     push : function (chunk) {\n         this.emit(\"data\", chunk);\n     },\n     /**\n      * End the stream.\n      * @return {Boolean} true if this call ended the worker, false otherwise.\n      */\n     end : function () {\n         if (this.isFinished) {\n             return false;\n         }\n\n         this.flush();\n         try {\n             this.emit(\"end\");\n             this.cleanUp();\n             this.isFinished = true;\n         } catch (e) {\n             this.emit(\"error\", e);\n         }\n         return true;\n     },\n     /**\n      * End the stream with an error.\n      * @param {Error} e the error which caused the premature end.\n      * @return {Boolean} true if this call ended the worker with an error, false otherwise.\n      */\n     error : function (e) {\n         if (this.isFinished) {\n             return false;\n         }\n\n         if(this.isPaused) {\n             this.generatedError = e;\n         } else {\n             this.isFinished = true;\n\n             this.emit(\"error\", e);\n\n             // in the workers chain exploded in the middle of the chain,\n             // the error event will go downward but we also need to notify\n             // workers upward that there has been an error.\n             if(this.previous) {\n                 this.previous.error(e);\n             }\n\n             this.cleanUp();\n         }\n         return true;\n     },\n     /**\n      * Add a callback on an event.\n      * @param {String} name the name of the event (data, end, error)\n      * @param {Function} listener the function to call when the event is triggered\n      * @return {GenericWorker} the current object for chainability\n      */\n     on : function (name, listener) {\n         this._listeners[name].push(listener);\n         return this;\n     },\n     /**\n      * Clean any references when a worker is ending.\n      */\n     cleanUp : function () {\n         this.streamInfo = this.generatedError = this.extraStreamInfo = null;\n         this._listeners = [];\n     },\n     /**\n      * Trigger an event. This will call registered callback with the provided arg.\n      * @param {String} name the name of the event (data, end, error)\n      * @param {Object} arg the argument to call the callback with.\n      */\n     emit : function (name, arg) {\n         if (this._listeners[name]) {\n             for(var i = 0; i < this._listeners[name].length; i++) {\n                 this._listeners[name][i].call(this, arg);\n             }\n         }\n     },\n     /**\n      * Chain a worker with an other.\n      * @param {Worker} next the worker receiving events from the current one.\n      * @return {worker} the next worker for chainability\n      */\n     pipe : function (next) {\n         return next.registerPrevious(this);\n     },\n     /**\n      * Same as `pipe` in the other direction.\n      * Using an API with `pipe(next)` is very easy.\n      * Implementing the API with the point of view of the next one registering\n      * a source is easier, see the ZipFileWorker.\n      * @param {Worker} previous the previous worker, sending events to this one\n      * @return {Worker} the current worker for chainability\n      */\n     registerPrevious : function (previous) {\n         if (this.isLocked) {\n             throw new Error(\"The stream '\" + this + \"' has already been used.\");\n         }\n\n         // sharing the streamInfo...\n         this.streamInfo = previous.streamInfo;\n         // ... and adding our own bits\n         this.mergeStreamInfo();\n         this.previous =  previous;\n         var self = this;\n         previous.on(\"data\", function (chunk) {\n             self.processChunk(chunk);\n         });\n         previous.on(\"end\", function () {\n             self.end();\n         });\n         previous.on(\"error\", function (e) {\n             self.error(e);\n         });\n         return this;\n     },\n     /**\n      * Pause the stream so it doesn't send events anymore.\n      * @return {Boolean} true if this call paused the worker, false otherwise.\n      */\n     pause : function () {\n         if(this.isPaused || this.isFinished) {\n             return false;\n         }\n         this.isPaused = true;\n\n         if(this.previous) {\n             this.previous.pause();\n         }\n         return true;\n     },\n     /**\n      * Resume a paused stream.\n      * @return {Boolean} true if this call resumed the worker, false otherwise.\n      */\n     resume : function () {\n         if(!this.isPaused || this.isFinished) {\n             return false;\n         }\n         this.isPaused = false;\n\n         // if true, the worker tried to resume but failed\n         var withError = false;\n         if(this.generatedError) {\n             this.error(this.generatedError);\n             withError = true;\n         }\n         if(this.previous) {\n             this.previous.resume();\n         }\n\n         return !withError;\n     },\n     /**\n      * Flush any remaining bytes as the stream is ending.\n      */\n     flush : function () {},\n     /**\n      * Process a chunk. This is usually the method overridden.\n      * @param {Object} chunk the chunk to process.\n      */\n     processChunk : function(chunk) {\n         this.push(chunk);\n     },\n     /**\n      * Add a key/value to be added in the workers chain streamInfo once activated.\n      * @param {String} key the key to use\n      * @param {Object} value the associated value\n      * @return {Worker} the current worker for chainability\n      */\n     withStreamInfo : function (key, value) {\n         this.extraStreamInfo[key] = value;\n         this.mergeStreamInfo();\n         return this;\n     },\n     /**\n      * Merge this worker's streamInfo into the chain's streamInfo.\n      */\n     mergeStreamInfo : function () {\n         for(var key in this.extraStreamInfo) {\n             if (!Object.prototype.hasOwnProperty.call(this.extraStreamInfo, key)) {\n                 continue;\n             }\n             this.streamInfo[key] = this.extraStreamInfo[key];\n         }\n     },\n\n     /**\n      * Lock the stream to prevent further updates on the workers chain.\n      * After calling this method, all calls to pipe will fail.\n      */\n     lock: function () {\n         if (this.isLocked) {\n             throw new Error(\"The stream '\" + this + \"' has already been used.\");\n         }\n         this.isLocked = true;\n         if (this.previous) {\n             this.previous.lock();\n         }\n     },\n\n     /**\n      *\n      * Pretty print the workers chain.\n      */\n     toString : function () {\n         var me = \"Worker \" + this.name;\n         if (this.previous) {\n             return this.previous + \" -> \" + me;\n         } else {\n             return me;\n         }\n     }\n };\n\n module.exports = GenericWorker;\n\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}
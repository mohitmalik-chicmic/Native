{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/assets/Script/Zip.ts"],"names":["_decorator","Component","SpriteFrame","Texture2D","Sprite","native","assetManager","ccclass","property","Zip","result","imageArray","downlaodZip","console","log","reflection","callStaticMethod","i","showImages","length","index","absolutePath","loadRemote","err","imageAsset","JSON","stringify","spriteFrame","texture","image","push","RandomSprite","start"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ImageAsset, SpriteFrame, Texture2D, Sprite, find, native, assetManager } from \"cc\";\nconst { ccclass, property } = _decorator;\n// import http from \"http\";\n//import JSZip from \"jszip\";\n\ndeclare global {\n    interface Navigator {\n        msSaveBlob?: (blob: any, defaultName?: string) => boolean;\n    }\n}\n\n/**\n interface OutputByType {\n    base64: string;\n    string: string;\n    text: string;\n    binarystring: string;\n    array: number[];\n    uint8array: Uint8Array;\n    arraybuffer: ArrayBuffer;\n    blob: Blob;\n    nodebuffer: Buffer;\n}\n\n */\n@ccclass(\"Zip\")\nexport class Zip extends Component {\n    @property(Sprite) RandomSprite: Sprite = null;\n    result =0;\n    imageArray : SpriteFrame[] = [];\n    start() {\n        //this.createDemoImage();\n        this.downlaodZip();\n      //  var zip = new JSZip();\n       // console.log(zip);\n\n        //Picture\n        // this.loadUsingRequest(\"https://drive.google.com/uc?export=download&id=1f0FHWfXE4exUErKzzsOj_7GTuc1FmtEg\");\n\n        // Mask\n       // this.loadUsingRequest(\"https://drive.google.com/uc?export=download&id=14MVx2mgsInNdfYx8jQ-6QwwgbPASpxQt\");\n\n        // this.loadFromRemote();\n        // this.loadZip();\n    }\n    // downlaodZip = () => {\n    //     console.log(\"clikced\");\n    //     let result = native.reflection.callStaticMethod(\"com/cocos/game/AppActivity\", \"ZipDownlaod\", \"(Ljava/lang/String;)Ljava/lang/String;\", \"start\");\n    //     if(result){\n    //         console.log(\"PRINTING\", result);\n    //         let absolutePath = `${result}/1.jpg`\n    //         assetManager.loadRemote<ImageAsset>(absolutePath, (err, imageAsset) => {\n    //             console.log(\"PATH\", absolutePath);\n    //             if (err) {\n    //                 console.log(\"ERROR\");\n    //                 console.log(JSON.stringify(err));\n    //                 return;\n    //             }\n    //             console.log(\"NO ERROR\");\n    //             const spriteFrame = new SpriteFrame();\n    //             const texture = new Texture2D();\n    //             texture.image = imageAsset;\n    //             spriteFrame.texture = texture;\n    //             console.log(\"SPRITE\", JSON.stringify(spriteFrame));\n    //             this.RandomSprite.spriteFrame = spriteFrame;    \n    //             //this.node.getComponent(Sprite).spriteFrame = spriteFrame;\n    //         });\n    //         }\n    //         this.showImages()\n    // }\n    downlaodZip = () => {\n        console.log(\"clikced\");\n        this.result = native.reflection.callStaticMethod(\"com/cocos/game/AppActivity\", \"ZipDownload\", \"(I)I\",1);\n        console.log(\"COCOS resuklt\",this.result);\n        if(this.result>0){\n            for(let i=0;i<this.result;i++){\n                this.showImages(i);\n            }\n            if(this.result==5)\n            console.log(\"IMAGE ARRAY\", this.imageArray.length)\n        }\n        \n        \n    }\n        \n    showImages= (index) =>{\n\n        let result = native.reflection.callStaticMethod(\"com/cocos/game/AppActivity\", \"getImages\", \"(I)Ljava/lang/String;\", index);\n        console.log(\"RESULT\",result);\n        if(result){\n                    console.log(\"PRINTING\", result);\n                    let absolutePath = `${result}`\n                    assetManager.loadRemote<ImageAsset>(absolutePath, (err, imageAsset) => {\n                        console.log(\"PATH\", absolutePath);\n                        if (err) {\n                            console.log(\"ERROR\");\n                            console.log(JSON.stringify(err));\n                            return;\n                        }\n                        console.log(\"NO ERROR\");\n                        const spriteFrame = new SpriteFrame();\n                        const texture = new Texture2D();\n                        texture.image = imageAsset;\n                        spriteFrame.texture = texture;\n                        console.log(\"SPRITE\", JSON.stringify(spriteFrame));\n                        this.imageArray.push(spriteFrame);\n                        this.RandomSprite.spriteFrame = spriteFrame;    \n                        //this.node.getComponent(Sprite).spriteFrame = spriteFrame;\n                    });\n                }\n        \n    }\n    }\n\n    // loadUsingRequest(remoteZipLink: string) {\n    //     const request = new Request(remoteZipLink); \n\n    //     const url = request.url;\n    //     const method = request.method;\n    //     const credentials = request.credentials;\n\n    //     console.log(url, method, credentials);\n\n    //     fetch(request)\n    //         .then((response) => response.blob())\n    //         .then((blob) => {\n    //             console.log(blob);\n\n    //             JSZip.loadAsync(blob).then((zip) => {\n    //                 console.log(\"LOADED SUCCESS\", zip);\n    //                 return zip\n    //                     .file(\"Mask/maskLeft.png\")\n    //                     .async(\"base64\")\n    //                     .then((data: string) => {\n    //                         let img = new Image();\n    //                         img.src = \"data:image/png;base64, \" + data;\n    //                         console.log(data);\n    //                         img.onload = () => {\n    //                             let imageAsset: ImageAsset = new ImageAsset(img);\n    //                             let tex: Texture2D = new Texture2D();\n    //                             tex.image = imageAsset;\n    //                             let spriteFrame = new SpriteFrame();\n    //                             spriteFrame.texture = tex;\n    //                             spriteFrame.packable = false;\n    //                             this.RandomSprite.spriteFrame = spriteFrame;\n    //                         };\n    //                     });\n    //             });\n    //         });\n    // }\n\n    // createDemoImage() {\n    //     let tempArr: number[] = [];\n    //     for (let i: number = 0; i < 16384; i++) {\n    //         tempArr.push(255);\n    //         tempArr.push(255);\n    //         tempArr.push(255);\n    //         tempArr.push(255);\n    //     }\n    //     for (let i: number = 0; i < 16384; i++) {\n    //         tempArr.push(255);\n    //         tempArr.push(0);\n    //         tempArr.push(0);\n    //         tempArr.push(255);\n    //     }\n    //     for (let i: number = 0; i < 16384; i++) {\n    //         tempArr.push(0);\n    //         tempArr.push(255);\n    //         tempArr.push(0);\n    //         tempArr.push(255);\n    //     }\n    //     for (let i: number = 0; i < 16384; i++) {\n    //         tempArr.push(0);\n    //         tempArr.push(0);\n    //         tempArr.push(255);\n    //         tempArr.push(255);\n    //     }\n\n    //     let pixelsArr: ArrayBufferView = new Uint8Array(tempArr);\n    //     let imageAsset: ImageAsset = new ImageAsset();\n    //     imageAsset.reset({\n    //         _data: pixelsArr,\n    //         width: 256,\n    //         height: 256,\n    //         format: Texture2D.PixelFormat.RGBA8888,\n    //         _compressed: false,\n    //     });\n    //     let tex: Texture2D = new Texture2D();\n    //     tex.image = imageAsset;\n    //     let spriteFrame = new SpriteFrame();\n    //     spriteFrame.texture = tex;\n    //     spriteFrame.packable = false;\n    //     this.RandomSprite.spriteFrame = spriteFrame;\n"]}
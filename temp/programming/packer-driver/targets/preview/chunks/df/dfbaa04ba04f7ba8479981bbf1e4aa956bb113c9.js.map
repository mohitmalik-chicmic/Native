{"version":3,"sources":["file:///Users/chicmic/Documents/InhouseCOCOS/ZipExtractor/assets/Script/Zip.ts"],"names":["_decorator","Component","Sprite","native","ccclass","property","Zip","downlaodZip","console","log","result","reflection","callStaticMethod","showImages","start"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAqDC,MAAAA,M,OAAAA,M;AAAcC,MAAAA,M,OAAAA,M;;;;;;;;;OAClF;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U,GAC9B;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;qBAEaM,G,WADZF,OAAO,CAAC,KAAD,C,UAEHC,QAAQ,CAACH,MAAD,C,2BAFb,MACaI,GADb,SACyBL,SADzB,CACmC;AAAA;AAAA;;AAAA;;AAAA,eA0C/BM,WA1C+B,GA0CjB,MAAM;AAChBC,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,gBAAIC,MAAM,GAAGP,MAAM,CAACQ,UAAP,CAAkBC,gBAAlB,CAAmC,4BAAnC,EAAiE,aAAjE,EAAgF,MAAhF,CAAb;AACAJ,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BC,MAA5B;AACA,iBAAKG,UAAL;AACH,WA/C8B;;AAAA,eAiD/BA,UAjD+B,GAiDnB,MAAK;AACb,gBAAIH,MAAM,GAAGP,MAAM,CAACQ,UAAP,CAAkBC,gBAAlB,CAAmC,4BAAnC,EAAiE,WAAjE,EAA8E,wCAA9E,EAAwH,OAAxH,CAAb;AACAJ,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBC,MAArB;AAEH,WArD8B;AAAA;;AAE/BI,QAAAA,KAAK,GAAG;AACJ;AACA,eAAKP,WAAL,GAFI,CAGN;AACC;AAEC;AACA;AAEA;AACD;AAEC;AACA;AACH,SAhB8B,CAiB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAzC+B,O;;;;;iBACU,I;;kCAuDzC;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { _decorator, Component, Node, ImageAsset, SpriteFrame, Texture2D, Sprite, find, native, assetManager } from \"cc\";\nconst { ccclass, property } = _decorator;\n// import http from \"http\";\n//import JSZip from \"jszip\";\n\ndeclare global {\n    interface Navigator {\n        msSaveBlob?: (blob: any, defaultName?: string) => boolean;\n    }\n}\n\n/**\n interface OutputByType {\n    base64: string;\n    string: string;\n    text: string;\n    binarystring: string;\n    array: number[];\n    uint8array: Uint8Array;\n    arraybuffer: ArrayBuffer;\n    blob: Blob;\n    nodebuffer: Buffer;\n}\n\n */\n@ccclass(\"Zip\")\nexport class Zip extends Component {\n    @property(Sprite) RandomSprite: Sprite = null;\n    start() {\n        //this.createDemoImage();\n        this.downlaodZip();\n      //  var zip = new JSZip();\n       // console.log(zip);\n\n        //Picture\n        // this.loadUsingRequest(\"https://drive.google.com/uc?export=download&id=1f0FHWfXE4exUErKzzsOj_7GTuc1FmtEg\");\n\n        // Mask\n       // this.loadUsingRequest(\"https://drive.google.com/uc?export=download&id=14MVx2mgsInNdfYx8jQ-6QwwgbPASpxQt\");\n\n        // this.loadFromRemote();\n        // this.loadZip();\n    }\n    // downlaodZip = () => {\n    //     console.log(\"clikced\");\n    //     let result = native.reflection.callStaticMethod(\"com/cocos/game/AppActivity\", \"ZipDownlaod\", \"(Ljava/lang/String;)Ljava/lang/String;\", \"start\");\n    //     if(result){\n    //         console.log(\"PRINTING\", result);\n    //         let absolutePath = `${result}/1.jpg`\n    //         assetManager.loadRemote<ImageAsset>(absolutePath, (err, imageAsset) => {\n    //             console.log(\"PATH\", absolutePath);\n    //             if (err) {\n    //                 console.log(\"ERROR\");\n    //                 console.log(JSON.stringify(err));\n    //                 return;\n    //             }\n    //             console.log(\"NO ERROR\");\n    //             const spriteFrame = new SpriteFrame();\n    //             const texture = new Texture2D();\n    //             texture.image = imageAsset;\n    //             spriteFrame.texture = texture;\n    //             console.log(\"SPRITE\", JSON.stringify(spriteFrame));\n    //             this.RandomSprite.spriteFrame = spriteFrame;    \n    //             //this.node.getComponent(Sprite).spriteFrame = spriteFrame;\n    //         });\n    //         }\n    //         this.showImages()\n    // }\n    downlaodZip = () => {\n        console.log(\"clikced\");\n        let result = native.reflection.callStaticMethod(\"com/cocos/game/AppActivity\", \"ZipDownlaod\", \"(I)V\");\n        console.log(\"COCOS resuklt\",result);\n        this.showImages();\n    }\n        \n    showImages= () =>{\n        let result = native.reflection.callStaticMethod(\"com/cocos/game/AppActivity\", \"getImages\", \"(Ljava/lang/String;)Ljava/lang/String;\", \"start\");\n        console.log(\"RESULT\",result);\n        \n    }\n    }\n\n    // loadUsingRequest(remoteZipLink: string) {\n    //     const request = new Request(remoteZipLink); \n\n    //     const url = request.url;\n    //     const method = request.method;\n    //     const credentials = request.credentials;\n\n    //     console.log(url, method, credentials);\n\n    //     fetch(request)\n    //         .then((response) => response.blob())\n    //         .then((blob) => {\n    //             console.log(blob);\n\n    //             JSZip.loadAsync(blob).then((zip) => {\n    //                 console.log(\"LOADED SUCCESS\", zip);\n    //                 return zip\n    //                     .file(\"Mask/maskLeft.png\")\n    //                     .async(\"base64\")\n    //                     .then((data: string) => {\n    //                         let img = new Image();\n    //                         img.src = \"data:image/png;base64, \" + data;\n    //                         console.log(data);\n    //                         img.onload = () => {\n    //                             let imageAsset: ImageAsset = new ImageAsset(img);\n    //                             let tex: Texture2D = new Texture2D();\n    //                             tex.image = imageAsset;\n    //                             let spriteFrame = new SpriteFrame();\n    //                             spriteFrame.texture = tex;\n    //                             spriteFrame.packable = false;\n    //                             this.RandomSprite.spriteFrame = spriteFrame;\n    //                         };\n    //                     });\n    //             });\n    //         });\n    // }\n\n    // createDemoImage() {\n    //     let tempArr: number[] = [];\n    //     for (let i: number = 0; i < 16384; i++) {\n    //         tempArr.push(255);\n    //         tempArr.push(255);\n    //         tempArr.push(255);\n    //         tempArr.push(255);\n    //     }\n    //     for (let i: number = 0; i < 16384; i++) {\n    //         tempArr.push(255);\n    //         tempArr.push(0);\n    //         tempArr.push(0);\n    //         tempArr.push(255);\n    //     }\n    //     for (let i: number = 0; i < 16384; i++) {\n    //         tempArr.push(0);\n    //         tempArr.push(255);\n    //         tempArr.push(0);\n    //         tempArr.push(255);\n    //     }\n    //     for (let i: number = 0; i < 16384; i++) {\n    //         tempArr.push(0);\n    //         tempArr.push(0);\n    //         tempArr.push(255);\n    //         tempArr.push(255);\n    //     }\n\n    //     let pixelsArr: ArrayBufferView = new Uint8Array(tempArr);\n    //     let imageAsset: ImageAsset = new ImageAsset();\n    //     imageAsset.reset({\n    //         _data: pixelsArr,\n    //         width: 256,\n    //         height: 256,\n    //         format: Texture2D.PixelFormat.RGBA8888,\n    //         _compressed: false,\n    //     });\n    //     let tex: Texture2D = new Texture2D();\n    //     tex.image = imageAsset;\n    //     let spriteFrame = new SpriteFrame();\n    //     spriteFrame.texture = tex;\n    //     spriteFrame.packable = false;\n    //     this.RandomSprite.spriteFrame = spriteFrame;\n"]}